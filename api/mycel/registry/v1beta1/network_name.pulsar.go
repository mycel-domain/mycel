// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: mycel/registry/v1beta1/network_name.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkName int32

const (
	NetworkName_NO_NETWORK NetworkName = 0
	// BTC 1xxx
	NetworkName_BITCOIN_MAINNET_MAINNET NetworkName = 10000
	NetworkName_BITCOIN_TESTNET_TESTNET NetworkName = 10001
	// DEFAULT
	NetworkName_BITCOIN_DEFAULT_DEFAULT NetworkName = 19999
	// EVM 2xxxx
	// Etheruem
	NetworkName_ETHEREUM_MAINNET_MAINNET NetworkName = 20000
	NetworkName_ETHEREUM_TESTNET_GOERLI  NetworkName = 20001
	NetworkName_ETHEREUM_TESTNET_SEPOLIA NetworkName = 20002
	// Polygon
	NetworkName_POLYGON_MAINNET_MAINNET NetworkName = 20003
	NetworkName_POLYGON_TESTNET_MUMBAI  NetworkName = 20004
	// BNB Chain
	NetworkName_BNB_MAINNET_MAINNET NetworkName = 20005
	NetworkName_BNB_TESTNET_TESTNET NetworkName = 20006
	// Avalanche
	NetworkName_AVALANCHE_MAINNET_CCHAIN NetworkName = 20007
	NetworkName_AVALANCHE_TESTNET_FUJI   NetworkName = 20008
	// Gnosis
	NetworkName_GNOSIS_MAINNET_MAINNET NetworkName = 20009
	NetworkName_GNOSIS_TESTNET_CHIADO  NetworkName = 20010
	// Optimism
	NetworkName_OPTIMISM_MAINNET_MAINNET NetworkName = 20011
	NetworkName_OPTIMISM_TESTNET_GOERLI  NetworkName = 20012
	// Arbitrum
	NetworkName_ARBITRUM_MAINNET_MAINNET NetworkName = 20013
	NetworkName_ARBITRUM_TESTNET_GOERLI  NetworkName = 20014
	// Shardeum
	//
	//	SHARDEUM_MAINNET_ = 20015;
	//	SHARDEUM_TESTNET_ = 20016;
	NetworkName_SHARDEUM_BETANET_SPHINX NetworkName = 20017
	// Zetachain
	// ZETA_MAINNET_MAINNET = 20018;
	NetworkName_ZETA_TESTNET_ATHENS NetworkName = 20019
	// DEFAULT
	NetworkName_EVM_DEFAULT_DEFAULT NetworkName = 29999
	// MOVE 3xxxx
	// Aptos
	NetworkName_APTOS_MAINNET_MAINNET NetworkName = 30000
	NetworkName_APTOS_TESTNET_TESTNET NetworkName = 30001
	// Sui
	NetworkName_SUI_MAINNET_MAINNET NetworkName = 30002
	NetworkName_SUI_TESTNET_TESTNET NetworkName = 30003
	// DEFAULT
	NetworkName_MOVE_DEFAULT_DEFAULT NetworkName = 39999
	// SOLANA 4xxxx
	NetworkName_SOLANA_MAINNET_MAINNET NetworkName = 40000
	NetworkName_SOLANA_TESTNET_TESTNET NetworkName = 40001
	// DEFAULT
	NetworkName_SOLANA_DEFAULT_DEFAULT NetworkName = 49999
)

// Enum value maps for NetworkName.
var (
	NetworkName_name = map[int32]string{
		0:     "NO_NETWORK",
		10000: "BITCOIN_MAINNET_MAINNET",
		10001: "BITCOIN_TESTNET_TESTNET",
		19999: "BITCOIN_DEFAULT_DEFAULT",
		20000: "ETHEREUM_MAINNET_MAINNET",
		20001: "ETHEREUM_TESTNET_GOERLI",
		20002: "ETHEREUM_TESTNET_SEPOLIA",
		20003: "POLYGON_MAINNET_MAINNET",
		20004: "POLYGON_TESTNET_MUMBAI",
		20005: "BNB_MAINNET_MAINNET",
		20006: "BNB_TESTNET_TESTNET",
		20007: "AVALANCHE_MAINNET_CCHAIN",
		20008: "AVALANCHE_TESTNET_FUJI",
		20009: "GNOSIS_MAINNET_MAINNET",
		20010: "GNOSIS_TESTNET_CHIADO",
		20011: "OPTIMISM_MAINNET_MAINNET",
		20012: "OPTIMISM_TESTNET_GOERLI",
		20013: "ARBITRUM_MAINNET_MAINNET",
		20014: "ARBITRUM_TESTNET_GOERLI",
		20017: "SHARDEUM_BETANET_SPHINX",
		20019: "ZETA_TESTNET_ATHENS",
		29999: "EVM_DEFAULT_DEFAULT",
		30000: "APTOS_MAINNET_MAINNET",
		30001: "APTOS_TESTNET_TESTNET",
		30002: "SUI_MAINNET_MAINNET",
		30003: "SUI_TESTNET_TESTNET",
		39999: "MOVE_DEFAULT_DEFAULT",
		40000: "SOLANA_MAINNET_MAINNET",
		40001: "SOLANA_TESTNET_TESTNET",
		49999: "SOLANA_DEFAULT_DEFAULT",
	}
	NetworkName_value = map[string]int32{
		"NO_NETWORK":               0,
		"BITCOIN_MAINNET_MAINNET":  10000,
		"BITCOIN_TESTNET_TESTNET":  10001,
		"BITCOIN_DEFAULT_DEFAULT":  19999,
		"ETHEREUM_MAINNET_MAINNET": 20000,
		"ETHEREUM_TESTNET_GOERLI":  20001,
		"ETHEREUM_TESTNET_SEPOLIA": 20002,
		"POLYGON_MAINNET_MAINNET":  20003,
		"POLYGON_TESTNET_MUMBAI":   20004,
		"BNB_MAINNET_MAINNET":      20005,
		"BNB_TESTNET_TESTNET":      20006,
		"AVALANCHE_MAINNET_CCHAIN": 20007,
		"AVALANCHE_TESTNET_FUJI":   20008,
		"GNOSIS_MAINNET_MAINNET":   20009,
		"GNOSIS_TESTNET_CHIADO":    20010,
		"OPTIMISM_MAINNET_MAINNET": 20011,
		"OPTIMISM_TESTNET_GOERLI":  20012,
		"ARBITRUM_MAINNET_MAINNET": 20013,
		"ARBITRUM_TESTNET_GOERLI":  20014,
		"SHARDEUM_BETANET_SPHINX":  20017,
		"ZETA_TESTNET_ATHENS":      20019,
		"EVM_DEFAULT_DEFAULT":      29999,
		"APTOS_MAINNET_MAINNET":    30000,
		"APTOS_TESTNET_TESTNET":    30001,
		"SUI_MAINNET_MAINNET":      30002,
		"SUI_TESTNET_TESTNET":      30003,
		"MOVE_DEFAULT_DEFAULT":     39999,
		"SOLANA_MAINNET_MAINNET":   40000,
		"SOLANA_TESTNET_TESTNET":   40001,
		"SOLANA_DEFAULT_DEFAULT":   49999,
	}
)

func (x NetworkName) Enum() *NetworkName {
	p := new(NetworkName)
	*p = x
	return p
}

func (x NetworkName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkName) Descriptor() protoreflect.EnumDescriptor {
	return file_mycel_registry_v1beta1_network_name_proto_enumTypes[0].Descriptor()
}

func (NetworkName) Type() protoreflect.EnumType {
	return &file_mycel_registry_v1beta1_network_name_proto_enumTypes[0]
}

func (x NetworkName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkName.Descriptor instead.
func (NetworkName) EnumDescriptor() ([]byte, []int) {
	return file_mycel_registry_v1beta1_network_name_proto_rawDescGZIP(), []int{0}
}

var File_mycel_registry_v1beta1_network_name_proto protoreflect.FileDescriptor

var file_mycel_registry_v1beta1_network_name_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6d, 0x79, 0x63,
	0x65, 0x6c, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2a, 0xfc, 0x06, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x90,
	0x4e, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x91, 0x4e, 0x12,
	0x1d, 0x0a, 0x17, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x9f, 0x9c, 0x01, 0x12, 0x1e,
	0x0a, 0x18, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e,
	0x45, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0xa0, 0x9c, 0x01, 0x12, 0x1d,
	0x0a, 0x17, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e,
	0x45, 0x54, 0x5f, 0x47, 0x4f, 0x45, 0x52, 0x4c, 0x49, 0x10, 0xa1, 0x9c, 0x01, 0x12, 0x1e, 0x0a,
	0x18, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45,
	0x54, 0x5f, 0x53, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x41, 0x10, 0xa2, 0x9c, 0x01, 0x12, 0x1d, 0x0a,
	0x17, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0xa3, 0x9c, 0x01, 0x12, 0x1c, 0x0a, 0x16,
	0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x5f,
	0x4d, 0x55, 0x4d, 0x42, 0x41, 0x49, 0x10, 0xa4, 0x9c, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x42, 0x4e,
	0x42, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45,
	0x54, 0x10, 0xa5, 0x9c, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x42, 0x4e, 0x42, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0xa6, 0x9c, 0x01,
	0x12, 0x1e, 0x0a, 0x18, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0xa7, 0x9c, 0x01,
	0x12, 0x1c, 0x0a, 0x16, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x4e, 0x45, 0x54, 0x5f, 0x46, 0x55, 0x4a, 0x49, 0x10, 0xa8, 0x9c, 0x01, 0x12, 0x1c,
	0x0a, 0x16, 0x47, 0x4e, 0x4f, 0x53, 0x49, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0xa9, 0x9c, 0x01, 0x12, 0x1b, 0x0a, 0x15,
	0x47, 0x4e, 0x4f, 0x53, 0x49, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x5f, 0x43,
	0x48, 0x49, 0x41, 0x44, 0x4f, 0x10, 0xaa, 0x9c, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x4f, 0x50, 0x54,
	0x49, 0x4d, 0x49, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0xab, 0x9c, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x4f, 0x50, 0x54,
	0x49, 0x4d, 0x49, 0x53, 0x4d, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x5f, 0x47, 0x4f,
	0x45, 0x52, 0x4c, 0x49, 0x10, 0xac, 0x9c, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x41, 0x52, 0x42, 0x49,
	0x54, 0x52, 0x55, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x4e, 0x45, 0x54, 0x10, 0xad, 0x9c, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x41, 0x52, 0x42, 0x49,
	0x54, 0x52, 0x55, 0x4d, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x5f, 0x47, 0x4f, 0x45,
	0x52, 0x4c, 0x49, 0x10, 0xae, 0x9c, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x53, 0x48, 0x41, 0x52, 0x44,
	0x45, 0x55, 0x4d, 0x5f, 0x42, 0x45, 0x54, 0x41, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x50, 0x48, 0x49,
	0x4e, 0x58, 0x10, 0xb1, 0x9c, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x5a, 0x45, 0x54, 0x41, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x5f, 0x41, 0x54, 0x48, 0x45, 0x4e, 0x53, 0x10, 0xb3, 0x9c,
	0x01, 0x12, 0x19, 0x0a, 0x13, 0x45, 0x56, 0x4d, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0xaf, 0xea, 0x01, 0x12, 0x1b, 0x0a, 0x15,
	0x41, 0x50, 0x54, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0xb0, 0xea, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x41, 0x50, 0x54,
	0x4f, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e,
	0x45, 0x54, 0x10, 0xb1, 0xea, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x53, 0x55, 0x49, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x4e, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0xb2, 0xea,
	0x01, 0x12, 0x19, 0x0a, 0x13, 0x53, 0x55, 0x49, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0xb3, 0xea, 0x01, 0x12, 0x1a, 0x0a, 0x14,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0xbf, 0xb8, 0x02, 0x12, 0x1c, 0x0a, 0x16, 0x53, 0x4f, 0x4c, 0x41,
	0x4e, 0x41, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e,
	0x45, 0x54, 0x10, 0xc0, 0xb8, 0x02, 0x12, 0x1c, 0x0a, 0x16, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54,
	0x10, 0xc1, 0xb8, 0x02, 0x12, 0x1c, 0x0a, 0x16, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0xcf,
	0x86, 0x03, 0x42, 0xd8, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x79, 0x63, 0x65, 0x6c,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x42, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x6d,
	0x79, 0x63, 0x65, 0x6c, 0x2f, 0x78, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x4d, 0x52, 0x58, 0xaa, 0x02, 0x16, 0x4d, 0x79,
	0x63, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x16, 0x4d, 0x79, 0x63, 0x65, 0x6c, 0x5c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x22,
	0x4d, 0x79, 0x63, 0x65, 0x6c, 0x5c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5c, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x18, 0x4d, 0x79, 0x63, 0x65, 0x6c, 0x3a, 0x3a, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mycel_registry_v1beta1_network_name_proto_rawDescOnce sync.Once
	file_mycel_registry_v1beta1_network_name_proto_rawDescData = file_mycel_registry_v1beta1_network_name_proto_rawDesc
)

func file_mycel_registry_v1beta1_network_name_proto_rawDescGZIP() []byte {
	file_mycel_registry_v1beta1_network_name_proto_rawDescOnce.Do(func() {
		file_mycel_registry_v1beta1_network_name_proto_rawDescData = protoimpl.X.CompressGZIP(file_mycel_registry_v1beta1_network_name_proto_rawDescData)
	})
	return file_mycel_registry_v1beta1_network_name_proto_rawDescData
}

var file_mycel_registry_v1beta1_network_name_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mycel_registry_v1beta1_network_name_proto_goTypes = []interface{}{
	(NetworkName)(0), // 0: mycel.registry.v1beta1.NetworkName
}
var file_mycel_registry_v1beta1_network_name_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_mycel_registry_v1beta1_network_name_proto_init() }
func file_mycel_registry_v1beta1_network_name_proto_init() {
	if File_mycel_registry_v1beta1_network_name_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mycel_registry_v1beta1_network_name_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mycel_registry_v1beta1_network_name_proto_goTypes,
		DependencyIndexes: file_mycel_registry_v1beta1_network_name_proto_depIdxs,
		EnumInfos:         file_mycel_registry_v1beta1_network_name_proto_enumTypes,
	}.Build()
	File_mycel_registry_v1beta1_network_name_proto = out.File
	file_mycel_registry_v1beta1_network_name_proto_rawDesc = nil
	file_mycel_registry_v1beta1_network_name_proto_goTypes = nil
	file_mycel_registry_v1beta1_network_name_proto_depIdxs = nil
}
