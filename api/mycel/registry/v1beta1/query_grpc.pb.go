// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of TopLevelDomain items.
	TopLevelDomain(ctx context.Context, in *QueryGetTopLevelDomainRequest, opts ...grpc.CallOption) (*QueryGetTopLevelDomainResponse, error)
	TopLevelDomainAll(ctx context.Context, in *QueryAllTopLevelDomainRequest, opts ...grpc.CallOption) (*QueryAllTopLevelDomainResponse, error)
	// Queries a list of SecondLevelDomain items.
	SecondLevelDomain(ctx context.Context, in *QueryGetSecondLevelDomainRequest, opts ...grpc.CallOption) (*QueryGetSecondLevelDomainResponse, error)
	SecondLevelDomainAll(ctx context.Context, in *QueryAllSecondLevelDomainRequest, opts ...grpc.CallOption) (*QueryAllSecondLevelDomainResponse, error)
	// Queries a list of DomainOwnership items.
	DomainOwnership(ctx context.Context, in *QueryGetDomainOwnershipRequest, opts ...grpc.CallOption) (*QueryGetDomainOwnershipResponse, error)
	DomainOwnershipAll(ctx context.Context, in *QueryAllDomainOwnershipRequest, opts ...grpc.CallOption) (*QueryAllDomainOwnershipResponse, error)
	// Queries a list of DomainRegistrationFee items.
	DomainRegistrationFee(ctx context.Context, in *QueryDomainRegistrationFeeRequest, opts ...grpc.CallOption) (*QueryDomainRegistrationFeeResponse, error)
	// Queries a list of Role items.
	Role(ctx context.Context, in *QueryRoleRequest, opts ...grpc.CallOption) (*QueryRoleResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TopLevelDomain(ctx context.Context, in *QueryGetTopLevelDomainRequest, opts ...grpc.CallOption) (*QueryGetTopLevelDomainResponse, error) {
	out := new(QueryGetTopLevelDomainResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.v1beta1.Query/TopLevelDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TopLevelDomainAll(ctx context.Context, in *QueryAllTopLevelDomainRequest, opts ...grpc.CallOption) (*QueryAllTopLevelDomainResponse, error) {
	out := new(QueryAllTopLevelDomainResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.v1beta1.Query/TopLevelDomainAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SecondLevelDomain(ctx context.Context, in *QueryGetSecondLevelDomainRequest, opts ...grpc.CallOption) (*QueryGetSecondLevelDomainResponse, error) {
	out := new(QueryGetSecondLevelDomainResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.v1beta1.Query/SecondLevelDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SecondLevelDomainAll(ctx context.Context, in *QueryAllSecondLevelDomainRequest, opts ...grpc.CallOption) (*QueryAllSecondLevelDomainResponse, error) {
	out := new(QueryAllSecondLevelDomainResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.v1beta1.Query/SecondLevelDomainAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainOwnership(ctx context.Context, in *QueryGetDomainOwnershipRequest, opts ...grpc.CallOption) (*QueryGetDomainOwnershipResponse, error) {
	out := new(QueryGetDomainOwnershipResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.v1beta1.Query/DomainOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainOwnershipAll(ctx context.Context, in *QueryAllDomainOwnershipRequest, opts ...grpc.CallOption) (*QueryAllDomainOwnershipResponse, error) {
	out := new(QueryAllDomainOwnershipResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.v1beta1.Query/DomainOwnershipAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainRegistrationFee(ctx context.Context, in *QueryDomainRegistrationFeeRequest, opts ...grpc.CallOption) (*QueryDomainRegistrationFeeResponse, error) {
	out := new(QueryDomainRegistrationFeeResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.v1beta1.Query/DomainRegistrationFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Role(ctx context.Context, in *QueryRoleRequest, opts ...grpc.CallOption) (*QueryRoleResponse, error) {
	out := new(QueryRoleResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.v1beta1.Query/Role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of TopLevelDomain items.
	TopLevelDomain(context.Context, *QueryGetTopLevelDomainRequest) (*QueryGetTopLevelDomainResponse, error)
	TopLevelDomainAll(context.Context, *QueryAllTopLevelDomainRequest) (*QueryAllTopLevelDomainResponse, error)
	// Queries a list of SecondLevelDomain items.
	SecondLevelDomain(context.Context, *QueryGetSecondLevelDomainRequest) (*QueryGetSecondLevelDomainResponse, error)
	SecondLevelDomainAll(context.Context, *QueryAllSecondLevelDomainRequest) (*QueryAllSecondLevelDomainResponse, error)
	// Queries a list of DomainOwnership items.
	DomainOwnership(context.Context, *QueryGetDomainOwnershipRequest) (*QueryGetDomainOwnershipResponse, error)
	DomainOwnershipAll(context.Context, *QueryAllDomainOwnershipRequest) (*QueryAllDomainOwnershipResponse, error)
	// Queries a list of DomainRegistrationFee items.
	DomainRegistrationFee(context.Context, *QueryDomainRegistrationFeeRequest) (*QueryDomainRegistrationFeeResponse, error)
	// Queries a list of Role items.
	Role(context.Context, *QueryRoleRequest) (*QueryRoleResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) TopLevelDomain(context.Context, *QueryGetTopLevelDomainRequest) (*QueryGetTopLevelDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopLevelDomain not implemented")
}
func (UnimplementedQueryServer) TopLevelDomainAll(context.Context, *QueryAllTopLevelDomainRequest) (*QueryAllTopLevelDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopLevelDomainAll not implemented")
}
func (UnimplementedQueryServer) SecondLevelDomain(context.Context, *QueryGetSecondLevelDomainRequest) (*QueryGetSecondLevelDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecondLevelDomain not implemented")
}
func (UnimplementedQueryServer) SecondLevelDomainAll(context.Context, *QueryAllSecondLevelDomainRequest) (*QueryAllSecondLevelDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecondLevelDomainAll not implemented")
}
func (UnimplementedQueryServer) DomainOwnership(context.Context, *QueryGetDomainOwnershipRequest) (*QueryGetDomainOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainOwnership not implemented")
}
func (UnimplementedQueryServer) DomainOwnershipAll(context.Context, *QueryAllDomainOwnershipRequest) (*QueryAllDomainOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainOwnershipAll not implemented")
}
func (UnimplementedQueryServer) DomainRegistrationFee(context.Context, *QueryDomainRegistrationFeeRequest) (*QueryDomainRegistrationFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainRegistrationFee not implemented")
}
func (UnimplementedQueryServer) Role(context.Context, *QueryRoleRequest) (*QueryRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Role not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TopLevelDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTopLevelDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopLevelDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.v1beta1.Query/TopLevelDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopLevelDomain(ctx, req.(*QueryGetTopLevelDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TopLevelDomainAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTopLevelDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopLevelDomainAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.v1beta1.Query/TopLevelDomainAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopLevelDomainAll(ctx, req.(*QueryAllTopLevelDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SecondLevelDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSecondLevelDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SecondLevelDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.v1beta1.Query/SecondLevelDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SecondLevelDomain(ctx, req.(*QueryGetSecondLevelDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SecondLevelDomainAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSecondLevelDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SecondLevelDomainAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.v1beta1.Query/SecondLevelDomainAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SecondLevelDomainAll(ctx, req.(*QueryAllSecondLevelDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDomainOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.v1beta1.Query/DomainOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainOwnership(ctx, req.(*QueryGetDomainOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainOwnershipAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDomainOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainOwnershipAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.v1beta1.Query/DomainOwnershipAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainOwnershipAll(ctx, req.(*QueryAllDomainOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainRegistrationFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDomainRegistrationFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainRegistrationFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.v1beta1.Query/DomainRegistrationFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainRegistrationFee(ctx, req.(*QueryDomainRegistrationFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Role_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Role(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.v1beta1.Query/Role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Role(ctx, req.(*QueryRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mycel.registry.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TopLevelDomain",
			Handler:    _Query_TopLevelDomain_Handler,
		},
		{
			MethodName: "TopLevelDomainAll",
			Handler:    _Query_TopLevelDomainAll_Handler,
		},
		{
			MethodName: "SecondLevelDomain",
			Handler:    _Query_SecondLevelDomain_Handler,
		},
		{
			MethodName: "SecondLevelDomainAll",
			Handler:    _Query_SecondLevelDomainAll_Handler,
		},
		{
			MethodName: "DomainOwnership",
			Handler:    _Query_DomainOwnership_Handler,
		},
		{
			MethodName: "DomainOwnershipAll",
			Handler:    _Query_DomainOwnershipAll_Handler,
		},
		{
			MethodName: "DomainRegistrationFee",
			Handler:    _Query_DomainRegistrationFee_Handler,
		},
		{
			MethodName: "Role",
			Handler:    _Query_Role_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mycel/registry/v1beta1/query.proto",
}
