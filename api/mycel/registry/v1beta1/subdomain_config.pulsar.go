// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package types

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_SubdomainRegistrationFees_1_list)(nil)

type _SubdomainRegistrationFees_1_list struct {
	list *[]*FeeByLength
}

func (x *_SubdomainRegistrationFees_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SubdomainRegistrationFees_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_SubdomainRegistrationFees_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*FeeByLength)
	(*x.list)[i] = concreteValue
}

func (x *_SubdomainRegistrationFees_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*FeeByLength)
	*x.list = append(*x.list, concreteValue)
}

func (x *_SubdomainRegistrationFees_1_list) AppendMutable() protoreflect.Value {
	v := new(FeeByLength)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SubdomainRegistrationFees_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_SubdomainRegistrationFees_1_list) NewElement() protoreflect.Value {
	v := new(FeeByLength)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SubdomainRegistrationFees_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_SubdomainRegistrationFees_2_list)(nil)

type _SubdomainRegistrationFees_2_list struct {
	list *[]*FeeByName
}

func (x *_SubdomainRegistrationFees_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SubdomainRegistrationFees_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_SubdomainRegistrationFees_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*FeeByName)
	(*x.list)[i] = concreteValue
}

func (x *_SubdomainRegistrationFees_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*FeeByName)
	*x.list = append(*x.list, concreteValue)
}

func (x *_SubdomainRegistrationFees_2_list) AppendMutable() protoreflect.Value {
	v := new(FeeByName)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SubdomainRegistrationFees_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_SubdomainRegistrationFees_2_list) NewElement() protoreflect.Value {
	v := new(FeeByName)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SubdomainRegistrationFees_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_SubdomainRegistrationFees               protoreflect.MessageDescriptor
	fd_SubdomainRegistrationFees_fee_by_length protoreflect.FieldDescriptor
	fd_SubdomainRegistrationFees_fee_by_name   protoreflect.FieldDescriptor
	fd_SubdomainRegistrationFees_default_fee   protoreflect.FieldDescriptor
)

func init() {
	file_mycel_registry_v1beta1_subdomain_config_proto_init()
	md_SubdomainRegistrationFees = File_mycel_registry_v1beta1_subdomain_config_proto.Messages().ByName("SubdomainRegistrationFees")
	fd_SubdomainRegistrationFees_fee_by_length = md_SubdomainRegistrationFees.Fields().ByName("fee_by_length")
	fd_SubdomainRegistrationFees_fee_by_name = md_SubdomainRegistrationFees.Fields().ByName("fee_by_name")
	fd_SubdomainRegistrationFees_default_fee = md_SubdomainRegistrationFees.Fields().ByName("default_fee")
}

var _ protoreflect.Message = (*fastReflection_SubdomainRegistrationFees)(nil)

type fastReflection_SubdomainRegistrationFees SubdomainRegistrationFees

func (x *SubdomainRegistrationFees) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SubdomainRegistrationFees)(x)
}

func (x *SubdomainRegistrationFees) slowProtoReflect() protoreflect.Message {
	mi := &file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SubdomainRegistrationFees_messageType fastReflection_SubdomainRegistrationFees_messageType
var _ protoreflect.MessageType = fastReflection_SubdomainRegistrationFees_messageType{}

type fastReflection_SubdomainRegistrationFees_messageType struct{}

func (x fastReflection_SubdomainRegistrationFees_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SubdomainRegistrationFees)(nil)
}
func (x fastReflection_SubdomainRegistrationFees_messageType) New() protoreflect.Message {
	return new(fastReflection_SubdomainRegistrationFees)
}
func (x fastReflection_SubdomainRegistrationFees_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SubdomainRegistrationFees
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SubdomainRegistrationFees) Descriptor() protoreflect.MessageDescriptor {
	return md_SubdomainRegistrationFees
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SubdomainRegistrationFees) Type() protoreflect.MessageType {
	return _fastReflection_SubdomainRegistrationFees_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SubdomainRegistrationFees) New() protoreflect.Message {
	return new(fastReflection_SubdomainRegistrationFees)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SubdomainRegistrationFees) Interface() protoreflect.ProtoMessage {
	return (*SubdomainRegistrationFees)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SubdomainRegistrationFees) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.FeeByLength) != 0 {
		value := protoreflect.ValueOfList(&_SubdomainRegistrationFees_1_list{list: &x.FeeByLength})
		if !f(fd_SubdomainRegistrationFees_fee_by_length, value) {
			return
		}
	}
	if len(x.FeeByName) != 0 {
		value := protoreflect.ValueOfList(&_SubdomainRegistrationFees_2_list{list: &x.FeeByName})
		if !f(fd_SubdomainRegistrationFees_fee_by_name, value) {
			return
		}
	}
	if x.DefaultFee != nil {
		value := protoreflect.ValueOfMessage(x.DefaultFee.ProtoReflect())
		if !f(fd_SubdomainRegistrationFees_default_fee, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SubdomainRegistrationFees) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_length":
		return len(x.FeeByLength) != 0
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_name":
		return len(x.FeeByName) != 0
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.default_fee":
		return x.DefaultFee != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.SubdomainRegistrationFees"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.SubdomainRegistrationFees does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubdomainRegistrationFees) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_length":
		x.FeeByLength = nil
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_name":
		x.FeeByName = nil
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.default_fee":
		x.DefaultFee = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.SubdomainRegistrationFees"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.SubdomainRegistrationFees does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SubdomainRegistrationFees) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_length":
		if len(x.FeeByLength) == 0 {
			return protoreflect.ValueOfList(&_SubdomainRegistrationFees_1_list{})
		}
		listValue := &_SubdomainRegistrationFees_1_list{list: &x.FeeByLength}
		return protoreflect.ValueOfList(listValue)
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_name":
		if len(x.FeeByName) == 0 {
			return protoreflect.ValueOfList(&_SubdomainRegistrationFees_2_list{})
		}
		listValue := &_SubdomainRegistrationFees_2_list{list: &x.FeeByName}
		return protoreflect.ValueOfList(listValue)
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.default_fee":
		value := x.DefaultFee
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.SubdomainRegistrationFees"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.SubdomainRegistrationFees does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubdomainRegistrationFees) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_length":
		lv := value.List()
		clv := lv.(*_SubdomainRegistrationFees_1_list)
		x.FeeByLength = *clv.list
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_name":
		lv := value.List()
		clv := lv.(*_SubdomainRegistrationFees_2_list)
		x.FeeByName = *clv.list
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.default_fee":
		x.DefaultFee = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.SubdomainRegistrationFees"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.SubdomainRegistrationFees does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubdomainRegistrationFees) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_length":
		if x.FeeByLength == nil {
			x.FeeByLength = []*FeeByLength{}
		}
		value := &_SubdomainRegistrationFees_1_list{list: &x.FeeByLength}
		return protoreflect.ValueOfList(value)
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_name":
		if x.FeeByName == nil {
			x.FeeByName = []*FeeByName{}
		}
		value := &_SubdomainRegistrationFees_2_list{list: &x.FeeByName}
		return protoreflect.ValueOfList(value)
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.default_fee":
		if x.DefaultFee == nil {
			x.DefaultFee = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.DefaultFee.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.SubdomainRegistrationFees"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.SubdomainRegistrationFees does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SubdomainRegistrationFees) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_length":
		list := []*FeeByLength{}
		return protoreflect.ValueOfList(&_SubdomainRegistrationFees_1_list{list: &list})
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_name":
		list := []*FeeByName{}
		return protoreflect.ValueOfList(&_SubdomainRegistrationFees_2_list{list: &list})
	case "mycel.registry.v1beta1.SubdomainRegistrationFees.default_fee":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.SubdomainRegistrationFees"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.SubdomainRegistrationFees does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SubdomainRegistrationFees) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mycel.registry.v1beta1.SubdomainRegistrationFees", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SubdomainRegistrationFees) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubdomainRegistrationFees) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SubdomainRegistrationFees) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SubdomainRegistrationFees) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SubdomainRegistrationFees)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.FeeByLength) > 0 {
			for _, e := range x.FeeByLength {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.FeeByName) > 0 {
			for _, e := range x.FeeByName {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.DefaultFee != nil {
			l = options.Size(x.DefaultFee)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SubdomainRegistrationFees)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.DefaultFee != nil {
			encoded, err := options.Marshal(x.DefaultFee)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.FeeByName) > 0 {
			for iNdEx := len(x.FeeByName) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.FeeByName[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.FeeByLength) > 0 {
			for iNdEx := len(x.FeeByLength) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.FeeByLength[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SubdomainRegistrationFees)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SubdomainRegistrationFees: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SubdomainRegistrationFees: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeByLength", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeeByLength = append(x.FeeByLength, &FeeByLength{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FeeByLength[len(x.FeeByLength)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeByName", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeeByName = append(x.FeeByName, &FeeByName{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FeeByName[len(x.FeeByName)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.DefaultFee == nil {
					x.DefaultFee = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DefaultFee); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_FeeByLength                protoreflect.MessageDescriptor
	fd_FeeByLength_length         protoreflect.FieldDescriptor
	fd_FeeByLength_is_registrable protoreflect.FieldDescriptor
	fd_FeeByLength_fee            protoreflect.FieldDescriptor
)

func init() {
	file_mycel_registry_v1beta1_subdomain_config_proto_init()
	md_FeeByLength = File_mycel_registry_v1beta1_subdomain_config_proto.Messages().ByName("FeeByLength")
	fd_FeeByLength_length = md_FeeByLength.Fields().ByName("length")
	fd_FeeByLength_is_registrable = md_FeeByLength.Fields().ByName("is_registrable")
	fd_FeeByLength_fee = md_FeeByLength.Fields().ByName("fee")
}

var _ protoreflect.Message = (*fastReflection_FeeByLength)(nil)

type fastReflection_FeeByLength FeeByLength

func (x *FeeByLength) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FeeByLength)(x)
}

func (x *FeeByLength) slowProtoReflect() protoreflect.Message {
	mi := &file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FeeByLength_messageType fastReflection_FeeByLength_messageType
var _ protoreflect.MessageType = fastReflection_FeeByLength_messageType{}

type fastReflection_FeeByLength_messageType struct{}

func (x fastReflection_FeeByLength_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FeeByLength)(nil)
}
func (x fastReflection_FeeByLength_messageType) New() protoreflect.Message {
	return new(fastReflection_FeeByLength)
}
func (x fastReflection_FeeByLength_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeByLength
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FeeByLength) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeByLength
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FeeByLength) Type() protoreflect.MessageType {
	return _fastReflection_FeeByLength_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FeeByLength) New() protoreflect.Message {
	return new(fastReflection_FeeByLength)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FeeByLength) Interface() protoreflect.ProtoMessage {
	return (*FeeByLength)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FeeByLength) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Length != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Length)
		if !f(fd_FeeByLength_length, value) {
			return
		}
	}
	if x.IsRegistrable != false {
		value := protoreflect.ValueOfBool(x.IsRegistrable)
		if !f(fd_FeeByLength_is_registrable, value) {
			return
		}
	}
	if x.Fee != nil {
		value := protoreflect.ValueOfMessage(x.Fee.ProtoReflect())
		if !f(fd_FeeByLength_fee, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FeeByLength) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.FeeByLength.length":
		return x.Length != uint32(0)
	case "mycel.registry.v1beta1.FeeByLength.is_registrable":
		return x.IsRegistrable != false
	case "mycel.registry.v1beta1.FeeByLength.fee":
		return x.Fee != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.FeeByLength"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.FeeByLength does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeByLength) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.FeeByLength.length":
		x.Length = uint32(0)
	case "mycel.registry.v1beta1.FeeByLength.is_registrable":
		x.IsRegistrable = false
	case "mycel.registry.v1beta1.FeeByLength.fee":
		x.Fee = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.FeeByLength"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.FeeByLength does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FeeByLength) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mycel.registry.v1beta1.FeeByLength.length":
		value := x.Length
		return protoreflect.ValueOfUint32(value)
	case "mycel.registry.v1beta1.FeeByLength.is_registrable":
		value := x.IsRegistrable
		return protoreflect.ValueOfBool(value)
	case "mycel.registry.v1beta1.FeeByLength.fee":
		value := x.Fee
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.FeeByLength"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.FeeByLength does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeByLength) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.FeeByLength.length":
		x.Length = uint32(value.Uint())
	case "mycel.registry.v1beta1.FeeByLength.is_registrable":
		x.IsRegistrable = value.Bool()
	case "mycel.registry.v1beta1.FeeByLength.fee":
		x.Fee = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.FeeByLength"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.FeeByLength does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeByLength) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.FeeByLength.fee":
		if x.Fee == nil {
			x.Fee = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Fee.ProtoReflect())
	case "mycel.registry.v1beta1.FeeByLength.length":
		panic(fmt.Errorf("field length of message mycel.registry.v1beta1.FeeByLength is not mutable"))
	case "mycel.registry.v1beta1.FeeByLength.is_registrable":
		panic(fmt.Errorf("field is_registrable of message mycel.registry.v1beta1.FeeByLength is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.FeeByLength"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.FeeByLength does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FeeByLength) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.FeeByLength.length":
		return protoreflect.ValueOfUint32(uint32(0))
	case "mycel.registry.v1beta1.FeeByLength.is_registrable":
		return protoreflect.ValueOfBool(false)
	case "mycel.registry.v1beta1.FeeByLength.fee":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.FeeByLength"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.FeeByLength does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FeeByLength) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mycel.registry.v1beta1.FeeByLength", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FeeByLength) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeByLength) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FeeByLength) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FeeByLength) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FeeByLength)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Length != 0 {
			n += 1 + runtime.Sov(uint64(x.Length))
		}
		if x.IsRegistrable {
			n += 2
		}
		if x.Fee != nil {
			l = options.Size(x.Fee)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FeeByLength)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Fee != nil {
			encoded, err := options.Marshal(x.Fee)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.IsRegistrable {
			i--
			if x.IsRegistrable {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
		}
		if x.Length != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Length))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FeeByLength)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeByLength: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeByLength: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
				}
				x.Length = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Length |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsRegistrable", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsRegistrable = bool(v != 0)
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Fee == nil {
					x.Fee = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Fee); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_FeeByName                protoreflect.MessageDescriptor
	fd_FeeByName_name           protoreflect.FieldDescriptor
	fd_FeeByName_is_registrable protoreflect.FieldDescriptor
	fd_FeeByName_fee            protoreflect.FieldDescriptor
)

func init() {
	file_mycel_registry_v1beta1_subdomain_config_proto_init()
	md_FeeByName = File_mycel_registry_v1beta1_subdomain_config_proto.Messages().ByName("FeeByName")
	fd_FeeByName_name = md_FeeByName.Fields().ByName("name")
	fd_FeeByName_is_registrable = md_FeeByName.Fields().ByName("is_registrable")
	fd_FeeByName_fee = md_FeeByName.Fields().ByName("fee")
}

var _ protoreflect.Message = (*fastReflection_FeeByName)(nil)

type fastReflection_FeeByName FeeByName

func (x *FeeByName) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FeeByName)(x)
}

func (x *FeeByName) slowProtoReflect() protoreflect.Message {
	mi := &file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FeeByName_messageType fastReflection_FeeByName_messageType
var _ protoreflect.MessageType = fastReflection_FeeByName_messageType{}

type fastReflection_FeeByName_messageType struct{}

func (x fastReflection_FeeByName_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FeeByName)(nil)
}
func (x fastReflection_FeeByName_messageType) New() protoreflect.Message {
	return new(fastReflection_FeeByName)
}
func (x fastReflection_FeeByName_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeByName
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FeeByName) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeByName
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FeeByName) Type() protoreflect.MessageType {
	return _fastReflection_FeeByName_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FeeByName) New() protoreflect.Message {
	return new(fastReflection_FeeByName)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FeeByName) Interface() protoreflect.ProtoMessage {
	return (*FeeByName)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FeeByName) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_FeeByName_name, value) {
			return
		}
	}
	if x.IsRegistrable != false {
		value := protoreflect.ValueOfBool(x.IsRegistrable)
		if !f(fd_FeeByName_is_registrable, value) {
			return
		}
	}
	if x.Fee != nil {
		value := protoreflect.ValueOfMessage(x.Fee.ProtoReflect())
		if !f(fd_FeeByName_fee, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FeeByName) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.FeeByName.name":
		return x.Name != ""
	case "mycel.registry.v1beta1.FeeByName.is_registrable":
		return x.IsRegistrable != false
	case "mycel.registry.v1beta1.FeeByName.fee":
		return x.Fee != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.FeeByName"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.FeeByName does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeByName) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.FeeByName.name":
		x.Name = ""
	case "mycel.registry.v1beta1.FeeByName.is_registrable":
		x.IsRegistrable = false
	case "mycel.registry.v1beta1.FeeByName.fee":
		x.Fee = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.FeeByName"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.FeeByName does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FeeByName) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mycel.registry.v1beta1.FeeByName.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "mycel.registry.v1beta1.FeeByName.is_registrable":
		value := x.IsRegistrable
		return protoreflect.ValueOfBool(value)
	case "mycel.registry.v1beta1.FeeByName.fee":
		value := x.Fee
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.FeeByName"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.FeeByName does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeByName) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.FeeByName.name":
		x.Name = value.Interface().(string)
	case "mycel.registry.v1beta1.FeeByName.is_registrable":
		x.IsRegistrable = value.Bool()
	case "mycel.registry.v1beta1.FeeByName.fee":
		x.Fee = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.FeeByName"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.FeeByName does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeByName) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.FeeByName.fee":
		if x.Fee == nil {
			x.Fee = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Fee.ProtoReflect())
	case "mycel.registry.v1beta1.FeeByName.name":
		panic(fmt.Errorf("field name of message mycel.registry.v1beta1.FeeByName is not mutable"))
	case "mycel.registry.v1beta1.FeeByName.is_registrable":
		panic(fmt.Errorf("field is_registrable of message mycel.registry.v1beta1.FeeByName is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.FeeByName"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.FeeByName does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FeeByName) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.FeeByName.name":
		return protoreflect.ValueOfString("")
	case "mycel.registry.v1beta1.FeeByName.is_registrable":
		return protoreflect.ValueOfBool(false)
	case "mycel.registry.v1beta1.FeeByName.fee":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.FeeByName"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.FeeByName does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FeeByName) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mycel.registry.v1beta1.FeeByName", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FeeByName) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeByName) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FeeByName) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FeeByName) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FeeByName)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsRegistrable {
			n += 2
		}
		if x.Fee != nil {
			l = options.Size(x.Fee)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FeeByName)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Fee != nil {
			encoded, err := options.Marshal(x.Fee)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.IsRegistrable {
			i--
			if x.IsRegistrable {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FeeByName)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeByName: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeByName: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsRegistrable", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsRegistrable = bool(v != 0)
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Fee == nil {
					x.Fee = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Fee); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SubdomainConfig                             protoreflect.MessageDescriptor
	fd_SubdomainConfig_max_subdomain_registrations protoreflect.FieldDescriptor
	fd_SubdomainConfig_subdomain_registration_fees protoreflect.FieldDescriptor
	fd_SubdomainConfig_is_registrable              protoreflect.FieldDescriptor
	fd_SubdomainConfig_registrable_role            protoreflect.FieldDescriptor
	fd_SubdomainConfig_custom_expiration_date      protoreflect.FieldDescriptor
	fd_SubdomainConfig_registration_policy         protoreflect.FieldDescriptor
)

func init() {
	file_mycel_registry_v1beta1_subdomain_config_proto_init()
	md_SubdomainConfig = File_mycel_registry_v1beta1_subdomain_config_proto.Messages().ByName("SubdomainConfig")
	fd_SubdomainConfig_max_subdomain_registrations = md_SubdomainConfig.Fields().ByName("max_subdomain_registrations")
	fd_SubdomainConfig_subdomain_registration_fees = md_SubdomainConfig.Fields().ByName("subdomain_registration_fees")
	fd_SubdomainConfig_is_registrable = md_SubdomainConfig.Fields().ByName("is_registrable")
	fd_SubdomainConfig_registrable_role = md_SubdomainConfig.Fields().ByName("registrable_role")
	fd_SubdomainConfig_custom_expiration_date = md_SubdomainConfig.Fields().ByName("custom_expiration_date")
	fd_SubdomainConfig_registration_policy = md_SubdomainConfig.Fields().ByName("registration_policy")
}

var _ protoreflect.Message = (*fastReflection_SubdomainConfig)(nil)

type fastReflection_SubdomainConfig SubdomainConfig

func (x *SubdomainConfig) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SubdomainConfig)(x)
}

func (x *SubdomainConfig) slowProtoReflect() protoreflect.Message {
	mi := &file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SubdomainConfig_messageType fastReflection_SubdomainConfig_messageType
var _ protoreflect.MessageType = fastReflection_SubdomainConfig_messageType{}

type fastReflection_SubdomainConfig_messageType struct{}

func (x fastReflection_SubdomainConfig_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SubdomainConfig)(nil)
}
func (x fastReflection_SubdomainConfig_messageType) New() protoreflect.Message {
	return new(fastReflection_SubdomainConfig)
}
func (x fastReflection_SubdomainConfig_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SubdomainConfig
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SubdomainConfig) Descriptor() protoreflect.MessageDescriptor {
	return md_SubdomainConfig
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SubdomainConfig) Type() protoreflect.MessageType {
	return _fastReflection_SubdomainConfig_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SubdomainConfig) New() protoreflect.Message {
	return new(fastReflection_SubdomainConfig)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SubdomainConfig) Interface() protoreflect.ProtoMessage {
	return (*SubdomainConfig)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SubdomainConfig) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MaxSubdomainRegistrations != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxSubdomainRegistrations)
		if !f(fd_SubdomainConfig_max_subdomain_registrations, value) {
			return
		}
	}
	if x.SubdomainRegistrationFees != nil {
		value := protoreflect.ValueOfMessage(x.SubdomainRegistrationFees.ProtoReflect())
		if !f(fd_SubdomainConfig_subdomain_registration_fees, value) {
			return
		}
	}
	if x.IsRegistrable != false {
		value := protoreflect.ValueOfBool(x.IsRegistrable)
		if !f(fd_SubdomainConfig_is_registrable, value) {
			return
		}
	}
	if x.RegistrableRole != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.RegistrableRole))
		if !f(fd_SubdomainConfig_registrable_role, value) {
			return
		}
	}
	if x.CustomExpirationDate != false {
		value := protoreflect.ValueOfBool(x.CustomExpirationDate)
		if !f(fd_SubdomainConfig_custom_expiration_date, value) {
			return
		}
	}
	if x.RegistrationPolicy != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.RegistrationPolicy))
		if !f(fd_SubdomainConfig_registration_policy, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SubdomainConfig) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.SubdomainConfig.max_subdomain_registrations":
		return x.MaxSubdomainRegistrations != uint64(0)
	case "mycel.registry.v1beta1.SubdomainConfig.subdomain_registration_fees":
		return x.SubdomainRegistrationFees != nil
	case "mycel.registry.v1beta1.SubdomainConfig.is_registrable":
		return x.IsRegistrable != false
	case "mycel.registry.v1beta1.SubdomainConfig.registrable_role":
		return x.RegistrableRole != 0
	case "mycel.registry.v1beta1.SubdomainConfig.custom_expiration_date":
		return x.CustomExpirationDate != false
	case "mycel.registry.v1beta1.SubdomainConfig.registration_policy":
		return x.RegistrationPolicy != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.SubdomainConfig"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.SubdomainConfig does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubdomainConfig) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.SubdomainConfig.max_subdomain_registrations":
		x.MaxSubdomainRegistrations = uint64(0)
	case "mycel.registry.v1beta1.SubdomainConfig.subdomain_registration_fees":
		x.SubdomainRegistrationFees = nil
	case "mycel.registry.v1beta1.SubdomainConfig.is_registrable":
		x.IsRegistrable = false
	case "mycel.registry.v1beta1.SubdomainConfig.registrable_role":
		x.RegistrableRole = 0
	case "mycel.registry.v1beta1.SubdomainConfig.custom_expiration_date":
		x.CustomExpirationDate = false
	case "mycel.registry.v1beta1.SubdomainConfig.registration_policy":
		x.RegistrationPolicy = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.SubdomainConfig"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.SubdomainConfig does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SubdomainConfig) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mycel.registry.v1beta1.SubdomainConfig.max_subdomain_registrations":
		value := x.MaxSubdomainRegistrations
		return protoreflect.ValueOfUint64(value)
	case "mycel.registry.v1beta1.SubdomainConfig.subdomain_registration_fees":
		value := x.SubdomainRegistrationFees
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "mycel.registry.v1beta1.SubdomainConfig.is_registrable":
		value := x.IsRegistrable
		return protoreflect.ValueOfBool(value)
	case "mycel.registry.v1beta1.SubdomainConfig.registrable_role":
		value := x.RegistrableRole
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "mycel.registry.v1beta1.SubdomainConfig.custom_expiration_date":
		value := x.CustomExpirationDate
		return protoreflect.ValueOfBool(value)
	case "mycel.registry.v1beta1.SubdomainConfig.registration_policy":
		value := x.RegistrationPolicy
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.SubdomainConfig"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.SubdomainConfig does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubdomainConfig) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.SubdomainConfig.max_subdomain_registrations":
		x.MaxSubdomainRegistrations = value.Uint()
	case "mycel.registry.v1beta1.SubdomainConfig.subdomain_registration_fees":
		x.SubdomainRegistrationFees = value.Message().Interface().(*SubdomainRegistrationFees)
	case "mycel.registry.v1beta1.SubdomainConfig.is_registrable":
		x.IsRegistrable = value.Bool()
	case "mycel.registry.v1beta1.SubdomainConfig.registrable_role":
		x.RegistrableRole = (DomainRole)(value.Enum())
	case "mycel.registry.v1beta1.SubdomainConfig.custom_expiration_date":
		x.CustomExpirationDate = value.Bool()
	case "mycel.registry.v1beta1.SubdomainConfig.registration_policy":
		x.RegistrationPolicy = (RegistrationPolicyType)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.SubdomainConfig"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.SubdomainConfig does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubdomainConfig) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.SubdomainConfig.subdomain_registration_fees":
		if x.SubdomainRegistrationFees == nil {
			x.SubdomainRegistrationFees = new(SubdomainRegistrationFees)
		}
		return protoreflect.ValueOfMessage(x.SubdomainRegistrationFees.ProtoReflect())
	case "mycel.registry.v1beta1.SubdomainConfig.max_subdomain_registrations":
		panic(fmt.Errorf("field max_subdomain_registrations of message mycel.registry.v1beta1.SubdomainConfig is not mutable"))
	case "mycel.registry.v1beta1.SubdomainConfig.is_registrable":
		panic(fmt.Errorf("field is_registrable of message mycel.registry.v1beta1.SubdomainConfig is not mutable"))
	case "mycel.registry.v1beta1.SubdomainConfig.registrable_role":
		panic(fmt.Errorf("field registrable_role of message mycel.registry.v1beta1.SubdomainConfig is not mutable"))
	case "mycel.registry.v1beta1.SubdomainConfig.custom_expiration_date":
		panic(fmt.Errorf("field custom_expiration_date of message mycel.registry.v1beta1.SubdomainConfig is not mutable"))
	case "mycel.registry.v1beta1.SubdomainConfig.registration_policy":
		panic(fmt.Errorf("field registration_policy of message mycel.registry.v1beta1.SubdomainConfig is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.SubdomainConfig"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.SubdomainConfig does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SubdomainConfig) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.SubdomainConfig.max_subdomain_registrations":
		return protoreflect.ValueOfUint64(uint64(0))
	case "mycel.registry.v1beta1.SubdomainConfig.subdomain_registration_fees":
		m := new(SubdomainRegistrationFees)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "mycel.registry.v1beta1.SubdomainConfig.is_registrable":
		return protoreflect.ValueOfBool(false)
	case "mycel.registry.v1beta1.SubdomainConfig.registrable_role":
		return protoreflect.ValueOfEnum(0)
	case "mycel.registry.v1beta1.SubdomainConfig.custom_expiration_date":
		return protoreflect.ValueOfBool(false)
	case "mycel.registry.v1beta1.SubdomainConfig.registration_policy":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.SubdomainConfig"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.SubdomainConfig does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SubdomainConfig) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mycel.registry.v1beta1.SubdomainConfig", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SubdomainConfig) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubdomainConfig) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SubdomainConfig) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SubdomainConfig) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SubdomainConfig)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.MaxSubdomainRegistrations != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxSubdomainRegistrations))
		}
		if x.SubdomainRegistrationFees != nil {
			l = options.Size(x.SubdomainRegistrationFees)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsRegistrable {
			n += 2
		}
		if x.RegistrableRole != 0 {
			n += 1 + runtime.Sov(uint64(x.RegistrableRole))
		}
		if x.CustomExpirationDate {
			n += 2
		}
		if x.RegistrationPolicy != 0 {
			n += 1 + runtime.Sov(uint64(x.RegistrationPolicy))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SubdomainConfig)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.RegistrationPolicy != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RegistrationPolicy))
			i--
			dAtA[i] = 0x30
		}
		if x.CustomExpirationDate {
			i--
			if x.CustomExpirationDate {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if x.RegistrableRole != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RegistrableRole))
			i--
			dAtA[i] = 0x20
		}
		if x.IsRegistrable {
			i--
			if x.IsRegistrable {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if x.SubdomainRegistrationFees != nil {
			encoded, err := options.Marshal(x.SubdomainRegistrationFees)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.MaxSubdomainRegistrations != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxSubdomainRegistrations))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SubdomainConfig)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SubdomainConfig: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SubdomainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxSubdomainRegistrations", wireType)
				}
				x.MaxSubdomainRegistrations = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxSubdomainRegistrations |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubdomainRegistrationFees", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SubdomainRegistrationFees == nil {
					x.SubdomainRegistrationFees = &SubdomainRegistrationFees{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SubdomainRegistrationFees); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsRegistrable", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsRegistrable = bool(v != 0)
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RegistrableRole", wireType)
				}
				x.RegistrableRole = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RegistrableRole |= DomainRole(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CustomExpirationDate", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.CustomExpirationDate = bool(v != 0)
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RegistrationPolicy", wireType)
				}
				x.RegistrationPolicy = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RegistrationPolicy |= RegistrationPolicyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: mycel/registry/v1beta1/subdomain_config.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegistrationPolicyType int32

const (
	RegistrationPolicyType_PRIVATE RegistrationPolicyType = 0
	RegistrationPolicyType_PUBLIC  RegistrationPolicyType = 1
)

// Enum value maps for RegistrationPolicyType.
var (
	RegistrationPolicyType_name = map[int32]string{
		0: "PRIVATE",
		1: "PUBLIC",
	}
	RegistrationPolicyType_value = map[string]int32{
		"PRIVATE": 0,
		"PUBLIC":  1,
	}
)

func (x RegistrationPolicyType) Enum() *RegistrationPolicyType {
	p := new(RegistrationPolicyType)
	*p = x
	return p
}

func (x RegistrationPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistrationPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_mycel_registry_v1beta1_subdomain_config_proto_enumTypes[0].Descriptor()
}

func (RegistrationPolicyType) Type() protoreflect.EnumType {
	return &file_mycel_registry_v1beta1_subdomain_config_proto_enumTypes[0]
}

func (x RegistrationPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegistrationPolicyType.Descriptor instead.
func (RegistrationPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_mycel_registry_v1beta1_subdomain_config_proto_rawDescGZIP(), []int{0}
}

type SubdomainRegistrationFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeByLength []*FeeByLength `protobuf:"bytes,1,rep,name=fee_by_length,json=feeByLength,proto3" json:"fee_by_length,omitempty"`
	FeeByName   []*FeeByName   `protobuf:"bytes,2,rep,name=fee_by_name,json=feeByName,proto3" json:"fee_by_name,omitempty"`
	DefaultFee  *v1beta1.Coin  `protobuf:"bytes,3,opt,name=default_fee,json=defaultFee,proto3" json:"default_fee,omitempty"`
}

func (x *SubdomainRegistrationFees) Reset() {
	*x = SubdomainRegistrationFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubdomainRegistrationFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubdomainRegistrationFees) ProtoMessage() {}

// Deprecated: Use SubdomainRegistrationFees.ProtoReflect.Descriptor instead.
func (*SubdomainRegistrationFees) Descriptor() ([]byte, []int) {
	return file_mycel_registry_v1beta1_subdomain_config_proto_rawDescGZIP(), []int{0}
}

func (x *SubdomainRegistrationFees) GetFeeByLength() []*FeeByLength {
	if x != nil {
		return x.FeeByLength
	}
	return nil
}

func (x *SubdomainRegistrationFees) GetFeeByName() []*FeeByName {
	if x != nil {
		return x.FeeByName
	}
	return nil
}

func (x *SubdomainRegistrationFees) GetDefaultFee() *v1beta1.Coin {
	if x != nil {
		return x.DefaultFee
	}
	return nil
}

type FeeByLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length        uint32        `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	IsRegistrable bool          `protobuf:"varint,2,opt,name=is_registrable,json=isRegistrable,proto3" json:"is_registrable,omitempty"`
	Fee           *v1beta1.Coin `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *FeeByLength) Reset() {
	*x = FeeByLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeByLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeByLength) ProtoMessage() {}

// Deprecated: Use FeeByLength.ProtoReflect.Descriptor instead.
func (*FeeByLength) Descriptor() ([]byte, []int) {
	return file_mycel_registry_v1beta1_subdomain_config_proto_rawDescGZIP(), []int{1}
}

func (x *FeeByLength) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *FeeByLength) GetIsRegistrable() bool {
	if x != nil {
		return x.IsRegistrable
	}
	return false
}

func (x *FeeByLength) GetFee() *v1beta1.Coin {
	if x != nil {
		return x.Fee
	}
	return nil
}

type FeeByName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsRegistrable bool          `protobuf:"varint,2,opt,name=is_registrable,json=isRegistrable,proto3" json:"is_registrable,omitempty"`
	Fee           *v1beta1.Coin `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *FeeByName) Reset() {
	*x = FeeByName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeByName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeByName) ProtoMessage() {}

// Deprecated: Use FeeByName.ProtoReflect.Descriptor instead.
func (*FeeByName) Descriptor() ([]byte, []int) {
	return file_mycel_registry_v1beta1_subdomain_config_proto_rawDescGZIP(), []int{2}
}

func (x *FeeByName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeeByName) GetIsRegistrable() bool {
	if x != nil {
		return x.IsRegistrable
	}
	return false
}

func (x *FeeByName) GetFee() *v1beta1.Coin {
	if x != nil {
		return x.Fee
	}
	return nil
}

type SubdomainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSubdomainRegistrations uint64                     `protobuf:"varint,1,opt,name=max_subdomain_registrations,json=maxSubdomainRegistrations,proto3" json:"max_subdomain_registrations,omitempty"`
	SubdomainRegistrationFees *SubdomainRegistrationFees `protobuf:"bytes,2,opt,name=subdomain_registration_fees,json=subdomainRegistrationFees,proto3" json:"subdomain_registration_fees,omitempty"`
	IsRegistrable             bool                       `protobuf:"varint,3,opt,name=is_registrable,json=isRegistrable,proto3" json:"is_registrable,omitempty"`
	RegistrableRole           DomainRole                 `protobuf:"varint,4,opt,name=registrable_role,json=registrableRole,proto3,enum=mycel.registry.v1beta1.DomainRole" json:"registrable_role,omitempty"`
	CustomExpirationDate      bool                       `protobuf:"varint,5,opt,name=custom_expiration_date,json=customExpirationDate,proto3" json:"custom_expiration_date,omitempty"`
	RegistrationPolicy        RegistrationPolicyType     `protobuf:"varint,6,opt,name=registration_policy,json=registrationPolicy,proto3,enum=mycel.registry.v1beta1.RegistrationPolicyType" json:"registration_policy,omitempty"`
}

func (x *SubdomainConfig) Reset() {
	*x = SubdomainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubdomainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubdomainConfig) ProtoMessage() {}

// Deprecated: Use SubdomainConfig.ProtoReflect.Descriptor instead.
func (*SubdomainConfig) Descriptor() ([]byte, []int) {
	return file_mycel_registry_v1beta1_subdomain_config_proto_rawDescGZIP(), []int{3}
}

func (x *SubdomainConfig) GetMaxSubdomainRegistrations() uint64 {
	if x != nil {
		return x.MaxSubdomainRegistrations
	}
	return 0
}

func (x *SubdomainConfig) GetSubdomainRegistrationFees() *SubdomainRegistrationFees {
	if x != nil {
		return x.SubdomainRegistrationFees
	}
	return nil
}

func (x *SubdomainConfig) GetIsRegistrable() bool {
	if x != nil {
		return x.IsRegistrable
	}
	return false
}

func (x *SubdomainConfig) GetRegistrableRole() DomainRole {
	if x != nil {
		return x.RegistrableRole
	}
	return DomainRole_NO_ROLE
}

func (x *SubdomainConfig) GetCustomExpirationDate() bool {
	if x != nil {
		return x.CustomExpirationDate
	}
	return false
}

func (x *SubdomainConfig) GetRegistrationPolicy() RegistrationPolicyType {
	if x != nil {
		return x.RegistrationPolicy
	}
	return RegistrationPolicyType_PRIVATE
}

var File_mycel_registry_v1beta1_subdomain_config_proto protoreflect.FileDescriptor

var file_mycel_registry_v1beta1_subdomain_config_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x01, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x79, 0x63, 0x65,
	0x6c, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x42, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0b,
	0x66, 0x65, 0x65, 0x42, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x0b, 0x66,
	0x65, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x09, 0x66, 0x65, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0a,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x65, 0x22, 0x79, 0x0a, 0x0b, 0x46, 0x65,
	0x65, 0x42, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x73, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a,
	0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xd1, 0x03, 0x0a, 0x0f, 0x53,
	0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e,
	0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x71,
	0x0a, 0x1b, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x52, 0x19, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a,
	0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d, 0x79, 0x63,
	0x65, 0x6c, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2a, 0x31,
	0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10,
	0x01, 0x42, 0xdc, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x42, 0x14, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2f, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2f, 0x78, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x4d, 0x52, 0x58, 0xaa, 0x02,
	0x16, 0x4d, 0x79, 0x63, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x16, 0x4d, 0x79, 0x63, 0x65, 0x6c, 0x5c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0xe2, 0x02, 0x22, 0x4d, 0x79, 0x63, 0x65, 0x6c, 0x5c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x4d, 0x79, 0x63, 0x65, 0x6c, 0x3a, 0x3a, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mycel_registry_v1beta1_subdomain_config_proto_rawDescOnce sync.Once
	file_mycel_registry_v1beta1_subdomain_config_proto_rawDescData = file_mycel_registry_v1beta1_subdomain_config_proto_rawDesc
)

func file_mycel_registry_v1beta1_subdomain_config_proto_rawDescGZIP() []byte {
	file_mycel_registry_v1beta1_subdomain_config_proto_rawDescOnce.Do(func() {
		file_mycel_registry_v1beta1_subdomain_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_mycel_registry_v1beta1_subdomain_config_proto_rawDescData)
	})
	return file_mycel_registry_v1beta1_subdomain_config_proto_rawDescData
}

var file_mycel_registry_v1beta1_subdomain_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_mycel_registry_v1beta1_subdomain_config_proto_goTypes = []interface{}{
	(RegistrationPolicyType)(0),       // 0: mycel.registry.v1beta1.RegistrationPolicyType
	(*SubdomainRegistrationFees)(nil), // 1: mycel.registry.v1beta1.SubdomainRegistrationFees
	(*FeeByLength)(nil),               // 2: mycel.registry.v1beta1.FeeByLength
	(*FeeByName)(nil),                 // 3: mycel.registry.v1beta1.FeeByName
	(*SubdomainConfig)(nil),           // 4: mycel.registry.v1beta1.SubdomainConfig
	(*v1beta1.Coin)(nil),              // 5: cosmos.base.v1beta1.Coin
	(DomainRole)(0),                   // 6: mycel.registry.v1beta1.DomainRole
}
var file_mycel_registry_v1beta1_subdomain_config_proto_depIdxs = []int32{
	2, // 0: mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_length:type_name -> mycel.registry.v1beta1.FeeByLength
	3, // 1: mycel.registry.v1beta1.SubdomainRegistrationFees.fee_by_name:type_name -> mycel.registry.v1beta1.FeeByName
	5, // 2: mycel.registry.v1beta1.SubdomainRegistrationFees.default_fee:type_name -> cosmos.base.v1beta1.Coin
	5, // 3: mycel.registry.v1beta1.FeeByLength.fee:type_name -> cosmos.base.v1beta1.Coin
	5, // 4: mycel.registry.v1beta1.FeeByName.fee:type_name -> cosmos.base.v1beta1.Coin
	1, // 5: mycel.registry.v1beta1.SubdomainConfig.subdomain_registration_fees:type_name -> mycel.registry.v1beta1.SubdomainRegistrationFees
	6, // 6: mycel.registry.v1beta1.SubdomainConfig.registrable_role:type_name -> mycel.registry.v1beta1.DomainRole
	0, // 7: mycel.registry.v1beta1.SubdomainConfig.registration_policy:type_name -> mycel.registry.v1beta1.RegistrationPolicyType
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_mycel_registry_v1beta1_subdomain_config_proto_init() }
func file_mycel_registry_v1beta1_subdomain_config_proto_init() {
	if File_mycel_registry_v1beta1_subdomain_config_proto != nil {
		return
	}
	file_mycel_registry_v1beta1_access_control_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubdomainRegistrationFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeByLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeByName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubdomainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mycel_registry_v1beta1_subdomain_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mycel_registry_v1beta1_subdomain_config_proto_goTypes,
		DependencyIndexes: file_mycel_registry_v1beta1_subdomain_config_proto_depIdxs,
		EnumInfos:         file_mycel_registry_v1beta1_subdomain_config_proto_enumTypes,
		MessageInfos:      file_mycel_registry_v1beta1_subdomain_config_proto_msgTypes,
	}.Build()
	File_mycel_registry_v1beta1_subdomain_config_proto = out.File
	file_mycel_registry_v1beta1_subdomain_config_proto_rawDesc = nil
	file_mycel_registry_v1beta1_subdomain_config_proto_goTypes = nil
	file_mycel_registry_v1beta1_subdomain_config_proto_depIdxs = nil
}
