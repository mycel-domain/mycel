// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package types

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_TopLevelDomain_5_list)(nil)

type _TopLevelDomain_5_list struct {
	list *[]*AccessControl
}

func (x *_TopLevelDomain_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TopLevelDomain_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TopLevelDomain_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AccessControl)
	(*x.list)[i] = concreteValue
}

func (x *_TopLevelDomain_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AccessControl)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TopLevelDomain_5_list) AppendMutable() protoreflect.Value {
	v := new(AccessControl)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TopLevelDomain_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TopLevelDomain_5_list) NewElement() protoreflect.Value {
	v := new(AccessControl)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TopLevelDomain_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_TopLevelDomain_6_list)(nil)

type _TopLevelDomain_6_list struct {
	list *[]*v1beta1.Coin
}

func (x *_TopLevelDomain_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TopLevelDomain_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TopLevelDomain_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_TopLevelDomain_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TopLevelDomain_6_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TopLevelDomain_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TopLevelDomain_6_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TopLevelDomain_6_list) IsValid() bool {
	return x.list != nil
}

var (
	md_TopLevelDomain                         protoreflect.MessageDescriptor
	fd_TopLevelDomain_name                    protoreflect.FieldDescriptor
	fd_TopLevelDomain_expiration_date         protoreflect.FieldDescriptor
	fd_TopLevelDomain_subdomain_config        protoreflect.FieldDescriptor
	fd_TopLevelDomain_subdomain_count         protoreflect.FieldDescriptor
	fd_TopLevelDomain_access_control          protoreflect.FieldDescriptor
	fd_TopLevelDomain_total_withdrawal_amount protoreflect.FieldDescriptor
)

func init() {
	file_mycel_registry_v1beta1_top_level_domain_proto_init()
	md_TopLevelDomain = File_mycel_registry_v1beta1_top_level_domain_proto.Messages().ByName("TopLevelDomain")
	fd_TopLevelDomain_name = md_TopLevelDomain.Fields().ByName("name")
	fd_TopLevelDomain_expiration_date = md_TopLevelDomain.Fields().ByName("expiration_date")
	fd_TopLevelDomain_subdomain_config = md_TopLevelDomain.Fields().ByName("subdomain_config")
	fd_TopLevelDomain_subdomain_count = md_TopLevelDomain.Fields().ByName("subdomain_count")
	fd_TopLevelDomain_access_control = md_TopLevelDomain.Fields().ByName("access_control")
	fd_TopLevelDomain_total_withdrawal_amount = md_TopLevelDomain.Fields().ByName("total_withdrawal_amount")
}

var _ protoreflect.Message = (*fastReflection_TopLevelDomain)(nil)

type fastReflection_TopLevelDomain TopLevelDomain

func (x *TopLevelDomain) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TopLevelDomain)(x)
}

func (x *TopLevelDomain) slowProtoReflect() protoreflect.Message {
	mi := &file_mycel_registry_v1beta1_top_level_domain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TopLevelDomain_messageType fastReflection_TopLevelDomain_messageType
var _ protoreflect.MessageType = fastReflection_TopLevelDomain_messageType{}

type fastReflection_TopLevelDomain_messageType struct{}

func (x fastReflection_TopLevelDomain_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TopLevelDomain)(nil)
}
func (x fastReflection_TopLevelDomain_messageType) New() protoreflect.Message {
	return new(fastReflection_TopLevelDomain)
}
func (x fastReflection_TopLevelDomain_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TopLevelDomain
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TopLevelDomain) Descriptor() protoreflect.MessageDescriptor {
	return md_TopLevelDomain
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TopLevelDomain) Type() protoreflect.MessageType {
	return _fastReflection_TopLevelDomain_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TopLevelDomain) New() protoreflect.Message {
	return new(fastReflection_TopLevelDomain)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TopLevelDomain) Interface() protoreflect.ProtoMessage {
	return (*TopLevelDomain)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TopLevelDomain) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_TopLevelDomain_name, value) {
			return
		}
	}
	if x.ExpirationDate != nil {
		value := protoreflect.ValueOfMessage(x.ExpirationDate.ProtoReflect())
		if !f(fd_TopLevelDomain_expiration_date, value) {
			return
		}
	}
	if x.SubdomainConfig != nil {
		value := protoreflect.ValueOfMessage(x.SubdomainConfig.ProtoReflect())
		if !f(fd_TopLevelDomain_subdomain_config, value) {
			return
		}
	}
	if x.SubdomainCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SubdomainCount)
		if !f(fd_TopLevelDomain_subdomain_count, value) {
			return
		}
	}
	if len(x.AccessControl) != 0 {
		value := protoreflect.ValueOfList(&_TopLevelDomain_5_list{list: &x.AccessControl})
		if !f(fd_TopLevelDomain_access_control, value) {
			return
		}
	}
	if len(x.TotalWithdrawalAmount) != 0 {
		value := protoreflect.ValueOfList(&_TopLevelDomain_6_list{list: &x.TotalWithdrawalAmount})
		if !f(fd_TopLevelDomain_total_withdrawal_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TopLevelDomain) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.TopLevelDomain.name":
		return x.Name != ""
	case "mycel.registry.v1beta1.TopLevelDomain.expiration_date":
		return x.ExpirationDate != nil
	case "mycel.registry.v1beta1.TopLevelDomain.subdomain_config":
		return x.SubdomainConfig != nil
	case "mycel.registry.v1beta1.TopLevelDomain.subdomain_count":
		return x.SubdomainCount != uint64(0)
	case "mycel.registry.v1beta1.TopLevelDomain.access_control":
		return len(x.AccessControl) != 0
	case "mycel.registry.v1beta1.TopLevelDomain.total_withdrawal_amount":
		return len(x.TotalWithdrawalAmount) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.TopLevelDomain"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.TopLevelDomain does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TopLevelDomain) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.TopLevelDomain.name":
		x.Name = ""
	case "mycel.registry.v1beta1.TopLevelDomain.expiration_date":
		x.ExpirationDate = nil
	case "mycel.registry.v1beta1.TopLevelDomain.subdomain_config":
		x.SubdomainConfig = nil
	case "mycel.registry.v1beta1.TopLevelDomain.subdomain_count":
		x.SubdomainCount = uint64(0)
	case "mycel.registry.v1beta1.TopLevelDomain.access_control":
		x.AccessControl = nil
	case "mycel.registry.v1beta1.TopLevelDomain.total_withdrawal_amount":
		x.TotalWithdrawalAmount = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.TopLevelDomain"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.TopLevelDomain does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TopLevelDomain) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mycel.registry.v1beta1.TopLevelDomain.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "mycel.registry.v1beta1.TopLevelDomain.expiration_date":
		value := x.ExpirationDate
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "mycel.registry.v1beta1.TopLevelDomain.subdomain_config":
		value := x.SubdomainConfig
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "mycel.registry.v1beta1.TopLevelDomain.subdomain_count":
		value := x.SubdomainCount
		return protoreflect.ValueOfUint64(value)
	case "mycel.registry.v1beta1.TopLevelDomain.access_control":
		if len(x.AccessControl) == 0 {
			return protoreflect.ValueOfList(&_TopLevelDomain_5_list{})
		}
		listValue := &_TopLevelDomain_5_list{list: &x.AccessControl}
		return protoreflect.ValueOfList(listValue)
	case "mycel.registry.v1beta1.TopLevelDomain.total_withdrawal_amount":
		if len(x.TotalWithdrawalAmount) == 0 {
			return protoreflect.ValueOfList(&_TopLevelDomain_6_list{})
		}
		listValue := &_TopLevelDomain_6_list{list: &x.TotalWithdrawalAmount}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.TopLevelDomain"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.TopLevelDomain does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TopLevelDomain) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.TopLevelDomain.name":
		x.Name = value.Interface().(string)
	case "mycel.registry.v1beta1.TopLevelDomain.expiration_date":
		x.ExpirationDate = value.Message().Interface().(*timestamppb.Timestamp)
	case "mycel.registry.v1beta1.TopLevelDomain.subdomain_config":
		x.SubdomainConfig = value.Message().Interface().(*SubdomainConfig)
	case "mycel.registry.v1beta1.TopLevelDomain.subdomain_count":
		x.SubdomainCount = value.Uint()
	case "mycel.registry.v1beta1.TopLevelDomain.access_control":
		lv := value.List()
		clv := lv.(*_TopLevelDomain_5_list)
		x.AccessControl = *clv.list
	case "mycel.registry.v1beta1.TopLevelDomain.total_withdrawal_amount":
		lv := value.List()
		clv := lv.(*_TopLevelDomain_6_list)
		x.TotalWithdrawalAmount = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.TopLevelDomain"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.TopLevelDomain does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TopLevelDomain) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.TopLevelDomain.expiration_date":
		if x.ExpirationDate == nil {
			x.ExpirationDate = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.ExpirationDate.ProtoReflect())
	case "mycel.registry.v1beta1.TopLevelDomain.subdomain_config":
		if x.SubdomainConfig == nil {
			x.SubdomainConfig = new(SubdomainConfig)
		}
		return protoreflect.ValueOfMessage(x.SubdomainConfig.ProtoReflect())
	case "mycel.registry.v1beta1.TopLevelDomain.access_control":
		if x.AccessControl == nil {
			x.AccessControl = []*AccessControl{}
		}
		value := &_TopLevelDomain_5_list{list: &x.AccessControl}
		return protoreflect.ValueOfList(value)
	case "mycel.registry.v1beta1.TopLevelDomain.total_withdrawal_amount":
		if x.TotalWithdrawalAmount == nil {
			x.TotalWithdrawalAmount = []*v1beta1.Coin{}
		}
		value := &_TopLevelDomain_6_list{list: &x.TotalWithdrawalAmount}
		return protoreflect.ValueOfList(value)
	case "mycel.registry.v1beta1.TopLevelDomain.name":
		panic(fmt.Errorf("field name of message mycel.registry.v1beta1.TopLevelDomain is not mutable"))
	case "mycel.registry.v1beta1.TopLevelDomain.subdomain_count":
		panic(fmt.Errorf("field subdomain_count of message mycel.registry.v1beta1.TopLevelDomain is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.TopLevelDomain"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.TopLevelDomain does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TopLevelDomain) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.TopLevelDomain.name":
		return protoreflect.ValueOfString("")
	case "mycel.registry.v1beta1.TopLevelDomain.expiration_date":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "mycel.registry.v1beta1.TopLevelDomain.subdomain_config":
		m := new(SubdomainConfig)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "mycel.registry.v1beta1.TopLevelDomain.subdomain_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "mycel.registry.v1beta1.TopLevelDomain.access_control":
		list := []*AccessControl{}
		return protoreflect.ValueOfList(&_TopLevelDomain_5_list{list: &list})
	case "mycel.registry.v1beta1.TopLevelDomain.total_withdrawal_amount":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_TopLevelDomain_6_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.TopLevelDomain"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.TopLevelDomain does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TopLevelDomain) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mycel.registry.v1beta1.TopLevelDomain", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TopLevelDomain) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TopLevelDomain) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TopLevelDomain) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TopLevelDomain) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TopLevelDomain)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ExpirationDate != nil {
			l = options.Size(x.ExpirationDate)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SubdomainConfig != nil {
			l = options.Size(x.SubdomainConfig)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SubdomainCount != 0 {
			n += 1 + runtime.Sov(uint64(x.SubdomainCount))
		}
		if len(x.AccessControl) > 0 {
			for _, e := range x.AccessControl {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.TotalWithdrawalAmount) > 0 {
			for _, e := range x.TotalWithdrawalAmount {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TopLevelDomain)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TotalWithdrawalAmount) > 0 {
			for iNdEx := len(x.TotalWithdrawalAmount) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TotalWithdrawalAmount[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.AccessControl) > 0 {
			for iNdEx := len(x.AccessControl) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AccessControl[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if x.SubdomainCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SubdomainCount))
			i--
			dAtA[i] = 0x20
		}
		if x.SubdomainConfig != nil {
			encoded, err := options.Marshal(x.SubdomainConfig)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.ExpirationDate != nil {
			encoded, err := options.Marshal(x.ExpirationDate)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TopLevelDomain)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TopLevelDomain: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TopLevelDomain: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ExpirationDate == nil {
					x.ExpirationDate = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ExpirationDate); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubdomainConfig", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SubdomainConfig == nil {
					x.SubdomainConfig = &SubdomainConfig{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SubdomainConfig); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubdomainCount", wireType)
				}
				x.SubdomainCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SubdomainCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AccessControl", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AccessControl = append(x.AccessControl, &AccessControl{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AccessControl[len(x.AccessControl)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalWithdrawalAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalWithdrawalAmount = append(x.TotalWithdrawalAmount, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TotalWithdrawalAmount[len(x.TotalWithdrawalAmount)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_TopLevelDomainFee_1_list)(nil)

type _TopLevelDomainFee_1_list struct {
	list *[]*v1beta1.Coin
}

func (x *_TopLevelDomainFee_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TopLevelDomainFee_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TopLevelDomainFee_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_TopLevelDomainFee_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TopLevelDomainFee_1_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TopLevelDomainFee_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TopLevelDomainFee_1_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TopLevelDomainFee_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_TopLevelDomainFee                 protoreflect.MessageDescriptor
	fd_TopLevelDomainFee_total_fee       protoreflect.FieldDescriptor
	fd_TopLevelDomainFee_burn_weight     protoreflect.FieldDescriptor
	fd_TopLevelDomainFee_fee_to_burn     protoreflect.FieldDescriptor
	fd_TopLevelDomainFee_fee_to_treasury protoreflect.FieldDescriptor
)

func init() {
	file_mycel_registry_v1beta1_top_level_domain_proto_init()
	md_TopLevelDomainFee = File_mycel_registry_v1beta1_top_level_domain_proto.Messages().ByName("TopLevelDomainFee")
	fd_TopLevelDomainFee_total_fee = md_TopLevelDomainFee.Fields().ByName("total_fee")
	fd_TopLevelDomainFee_burn_weight = md_TopLevelDomainFee.Fields().ByName("burn_weight")
	fd_TopLevelDomainFee_fee_to_burn = md_TopLevelDomainFee.Fields().ByName("fee_to_burn")
	fd_TopLevelDomainFee_fee_to_treasury = md_TopLevelDomainFee.Fields().ByName("fee_to_treasury")
}

var _ protoreflect.Message = (*fastReflection_TopLevelDomainFee)(nil)

type fastReflection_TopLevelDomainFee TopLevelDomainFee

func (x *TopLevelDomainFee) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TopLevelDomainFee)(x)
}

func (x *TopLevelDomainFee) slowProtoReflect() protoreflect.Message {
	mi := &file_mycel_registry_v1beta1_top_level_domain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TopLevelDomainFee_messageType fastReflection_TopLevelDomainFee_messageType
var _ protoreflect.MessageType = fastReflection_TopLevelDomainFee_messageType{}

type fastReflection_TopLevelDomainFee_messageType struct{}

func (x fastReflection_TopLevelDomainFee_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TopLevelDomainFee)(nil)
}
func (x fastReflection_TopLevelDomainFee_messageType) New() protoreflect.Message {
	return new(fastReflection_TopLevelDomainFee)
}
func (x fastReflection_TopLevelDomainFee_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TopLevelDomainFee
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TopLevelDomainFee) Descriptor() protoreflect.MessageDescriptor {
	return md_TopLevelDomainFee
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TopLevelDomainFee) Type() protoreflect.MessageType {
	return _fastReflection_TopLevelDomainFee_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TopLevelDomainFee) New() protoreflect.Message {
	return new(fastReflection_TopLevelDomainFee)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TopLevelDomainFee) Interface() protoreflect.ProtoMessage {
	return (*TopLevelDomainFee)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TopLevelDomainFee) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.TotalFee) != 0 {
		value := protoreflect.ValueOfList(&_TopLevelDomainFee_1_list{list: &x.TotalFee})
		if !f(fd_TopLevelDomainFee_total_fee, value) {
			return
		}
	}
	if x.BurnWeight != "" {
		value := protoreflect.ValueOfString(x.BurnWeight)
		if !f(fd_TopLevelDomainFee_burn_weight, value) {
			return
		}
	}
	if x.FeeToBurn != nil {
		value := protoreflect.ValueOfMessage(x.FeeToBurn.ProtoReflect())
		if !f(fd_TopLevelDomainFee_fee_to_burn, value) {
			return
		}
	}
	if x.FeeToTreasury != nil {
		value := protoreflect.ValueOfMessage(x.FeeToTreasury.ProtoReflect())
		if !f(fd_TopLevelDomainFee_fee_to_treasury, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TopLevelDomainFee) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.TopLevelDomainFee.total_fee":
		return len(x.TotalFee) != 0
	case "mycel.registry.v1beta1.TopLevelDomainFee.burn_weight":
		return x.BurnWeight != ""
	case "mycel.registry.v1beta1.TopLevelDomainFee.fee_to_burn":
		return x.FeeToBurn != nil
	case "mycel.registry.v1beta1.TopLevelDomainFee.fee_to_treasury":
		return x.FeeToTreasury != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.TopLevelDomainFee"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.TopLevelDomainFee does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TopLevelDomainFee) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.TopLevelDomainFee.total_fee":
		x.TotalFee = nil
	case "mycel.registry.v1beta1.TopLevelDomainFee.burn_weight":
		x.BurnWeight = ""
	case "mycel.registry.v1beta1.TopLevelDomainFee.fee_to_burn":
		x.FeeToBurn = nil
	case "mycel.registry.v1beta1.TopLevelDomainFee.fee_to_treasury":
		x.FeeToTreasury = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.TopLevelDomainFee"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.TopLevelDomainFee does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TopLevelDomainFee) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mycel.registry.v1beta1.TopLevelDomainFee.total_fee":
		if len(x.TotalFee) == 0 {
			return protoreflect.ValueOfList(&_TopLevelDomainFee_1_list{})
		}
		listValue := &_TopLevelDomainFee_1_list{list: &x.TotalFee}
		return protoreflect.ValueOfList(listValue)
	case "mycel.registry.v1beta1.TopLevelDomainFee.burn_weight":
		value := x.BurnWeight
		return protoreflect.ValueOfString(value)
	case "mycel.registry.v1beta1.TopLevelDomainFee.fee_to_burn":
		value := x.FeeToBurn
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "mycel.registry.v1beta1.TopLevelDomainFee.fee_to_treasury":
		value := x.FeeToTreasury
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.TopLevelDomainFee"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.TopLevelDomainFee does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TopLevelDomainFee) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.TopLevelDomainFee.total_fee":
		lv := value.List()
		clv := lv.(*_TopLevelDomainFee_1_list)
		x.TotalFee = *clv.list
	case "mycel.registry.v1beta1.TopLevelDomainFee.burn_weight":
		x.BurnWeight = value.Interface().(string)
	case "mycel.registry.v1beta1.TopLevelDomainFee.fee_to_burn":
		x.FeeToBurn = value.Message().Interface().(*v1beta1.Coin)
	case "mycel.registry.v1beta1.TopLevelDomainFee.fee_to_treasury":
		x.FeeToTreasury = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.TopLevelDomainFee"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.TopLevelDomainFee does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TopLevelDomainFee) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.TopLevelDomainFee.total_fee":
		if x.TotalFee == nil {
			x.TotalFee = []*v1beta1.Coin{}
		}
		value := &_TopLevelDomainFee_1_list{list: &x.TotalFee}
		return protoreflect.ValueOfList(value)
	case "mycel.registry.v1beta1.TopLevelDomainFee.fee_to_burn":
		if x.FeeToBurn == nil {
			x.FeeToBurn = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.FeeToBurn.ProtoReflect())
	case "mycel.registry.v1beta1.TopLevelDomainFee.fee_to_treasury":
		if x.FeeToTreasury == nil {
			x.FeeToTreasury = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.FeeToTreasury.ProtoReflect())
	case "mycel.registry.v1beta1.TopLevelDomainFee.burn_weight":
		panic(fmt.Errorf("field burn_weight of message mycel.registry.v1beta1.TopLevelDomainFee is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.TopLevelDomainFee"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.TopLevelDomainFee does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TopLevelDomainFee) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mycel.registry.v1beta1.TopLevelDomainFee.total_fee":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_TopLevelDomainFee_1_list{list: &list})
	case "mycel.registry.v1beta1.TopLevelDomainFee.burn_weight":
		return protoreflect.ValueOfString("")
	case "mycel.registry.v1beta1.TopLevelDomainFee.fee_to_burn":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "mycel.registry.v1beta1.TopLevelDomainFee.fee_to_treasury":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mycel.registry.v1beta1.TopLevelDomainFee"))
		}
		panic(fmt.Errorf("message mycel.registry.v1beta1.TopLevelDomainFee does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TopLevelDomainFee) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mycel.registry.v1beta1.TopLevelDomainFee", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TopLevelDomainFee) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TopLevelDomainFee) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TopLevelDomainFee) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TopLevelDomainFee) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TopLevelDomainFee)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.TotalFee) > 0 {
			for _, e := range x.TotalFee {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.BurnWeight)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.FeeToBurn != nil {
			l = options.Size(x.FeeToBurn)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.FeeToTreasury != nil {
			l = options.Size(x.FeeToTreasury)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TopLevelDomainFee)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.FeeToTreasury != nil {
			encoded, err := options.Marshal(x.FeeToTreasury)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.FeeToBurn != nil {
			encoded, err := options.Marshal(x.FeeToBurn)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.BurnWeight) > 0 {
			i -= len(x.BurnWeight)
			copy(dAtA[i:], x.BurnWeight)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BurnWeight)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.TotalFee) > 0 {
			for iNdEx := len(x.TotalFee) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TotalFee[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TopLevelDomainFee)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TopLevelDomainFee: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TopLevelDomainFee: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalFee = append(x.TotalFee, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TotalFee[len(x.TotalFee)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BurnWeight", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BurnWeight = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeToBurn", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.FeeToBurn == nil {
					x.FeeToBurn = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FeeToBurn); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeToTreasury", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.FeeToTreasury == nil {
					x.FeeToTreasury = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FeeToTreasury); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: mycel/registry/v1beta1/top_level_domain.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TopLevelDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExpirationDate        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	SubdomainConfig       *SubdomainConfig       `protobuf:"bytes,3,opt,name=subdomain_config,json=subdomainConfig,proto3" json:"subdomain_config,omitempty"`
	SubdomainCount        uint64                 `protobuf:"varint,4,opt,name=subdomain_count,json=subdomainCount,proto3" json:"subdomain_count,omitempty"`
	AccessControl         []*AccessControl       `protobuf:"bytes,5,rep,name=access_control,json=accessControl,proto3" json:"access_control,omitempty"`
	TotalWithdrawalAmount []*v1beta1.Coin        `protobuf:"bytes,6,rep,name=total_withdrawal_amount,json=totalWithdrawalAmount,proto3" json:"total_withdrawal_amount,omitempty"`
}

func (x *TopLevelDomain) Reset() {
	*x = TopLevelDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mycel_registry_v1beta1_top_level_domain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopLevelDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopLevelDomain) ProtoMessage() {}

// Deprecated: Use TopLevelDomain.ProtoReflect.Descriptor instead.
func (*TopLevelDomain) Descriptor() ([]byte, []int) {
	return file_mycel_registry_v1beta1_top_level_domain_proto_rawDescGZIP(), []int{0}
}

func (x *TopLevelDomain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopLevelDomain) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *TopLevelDomain) GetSubdomainConfig() *SubdomainConfig {
	if x != nil {
		return x.SubdomainConfig
	}
	return nil
}

func (x *TopLevelDomain) GetSubdomainCount() uint64 {
	if x != nil {
		return x.SubdomainCount
	}
	return 0
}

func (x *TopLevelDomain) GetAccessControl() []*AccessControl {
	if x != nil {
		return x.AccessControl
	}
	return nil
}

func (x *TopLevelDomain) GetTotalWithdrawalAmount() []*v1beta1.Coin {
	if x != nil {
		return x.TotalWithdrawalAmount
	}
	return nil
}

type TopLevelDomainFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalFee      []*v1beta1.Coin `protobuf:"bytes,1,rep,name=total_fee,json=totalFee,proto3" json:"total_fee,omitempty"`
	BurnWeight    string          `protobuf:"bytes,2,opt,name=burn_weight,json=burnWeight,proto3" json:"burn_weight,omitempty"`
	FeeToBurn     *v1beta1.Coin   `protobuf:"bytes,3,opt,name=fee_to_burn,json=feeToBurn,proto3" json:"fee_to_burn,omitempty"`
	FeeToTreasury *v1beta1.Coin   `protobuf:"bytes,4,opt,name=fee_to_treasury,json=feeToTreasury,proto3" json:"fee_to_treasury,omitempty"`
}

func (x *TopLevelDomainFee) Reset() {
	*x = TopLevelDomainFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mycel_registry_v1beta1_top_level_domain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopLevelDomainFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopLevelDomainFee) ProtoMessage() {}

// Deprecated: Use TopLevelDomainFee.ProtoReflect.Descriptor instead.
func (*TopLevelDomainFee) Descriptor() ([]byte, []int) {
	return file_mycel_registry_v1beta1_top_level_domain_proto_rawDescGZIP(), []int{1}
}

func (x *TopLevelDomainFee) GetTotalFee() []*v1beta1.Coin {
	if x != nil {
		return x.TotalFee
	}
	return nil
}

func (x *TopLevelDomainFee) GetBurnWeight() string {
	if x != nil {
		return x.BurnWeight
	}
	return ""
}

func (x *TopLevelDomainFee) GetFeeToBurn() *v1beta1.Coin {
	if x != nil {
		return x.FeeToBurn
	}
	return nil
}

func (x *TopLevelDomainFee) GetFeeToTreasury() *v1beta1.Coin {
	if x != nil {
		return x.FeeToTreasury
	}
	return nil
}

var File_mycel_registry_v1beta1_top_level_domain_proto protoreflect.FileDescriptor

var file_mycel_registry_v1beta1_top_level_domain_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x6d, 0x79, 0x63,
	0x65, 0x6c, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x03, 0x0a, 0x0e, 0x54,
	0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x52, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x79, 0x63,
	0x65, 0x6c, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a,
	0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x83, 0x01, 0x0a, 0x17,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf,
	0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xfe, 0x02, 0x0a, 0x11, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x68, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x72, 0x6e, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x6a, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x72,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0x8a, 0xdf, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x09, 0x66, 0x65, 0x65, 0x54, 0x6f, 0x42, 0x75, 0x72, 0x6e, 0x12, 0x72,
	0x0a, 0x0f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0x8a, 0xdf, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x0d, 0x66, 0x65, 0x65, 0x54, 0x6f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x42, 0xdb, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x79, 0x63, 0x65, 0x6c,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x42, 0x13, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2f, 0x6d, 0x79, 0x63, 0x65, 0x6c, 0x2f, 0x78, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x4d, 0x52, 0x58, 0xaa, 0x02,
	0x16, 0x4d, 0x79, 0x63, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x16, 0x4d, 0x79, 0x63, 0x65, 0x6c, 0x5c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0xe2, 0x02, 0x22, 0x4d, 0x79, 0x63, 0x65, 0x6c, 0x5c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x4d, 0x79, 0x63, 0x65, 0x6c, 0x3a, 0x3a, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mycel_registry_v1beta1_top_level_domain_proto_rawDescOnce sync.Once
	file_mycel_registry_v1beta1_top_level_domain_proto_rawDescData = file_mycel_registry_v1beta1_top_level_domain_proto_rawDesc
)

func file_mycel_registry_v1beta1_top_level_domain_proto_rawDescGZIP() []byte {
	file_mycel_registry_v1beta1_top_level_domain_proto_rawDescOnce.Do(func() {
		file_mycel_registry_v1beta1_top_level_domain_proto_rawDescData = protoimpl.X.CompressGZIP(file_mycel_registry_v1beta1_top_level_domain_proto_rawDescData)
	})
	return file_mycel_registry_v1beta1_top_level_domain_proto_rawDescData
}

var file_mycel_registry_v1beta1_top_level_domain_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_mycel_registry_v1beta1_top_level_domain_proto_goTypes = []interface{}{
	(*TopLevelDomain)(nil),        // 0: mycel.registry.v1beta1.TopLevelDomain
	(*TopLevelDomainFee)(nil),     // 1: mycel.registry.v1beta1.TopLevelDomainFee
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
	(*SubdomainConfig)(nil),       // 3: mycel.registry.v1beta1.SubdomainConfig
	(*AccessControl)(nil),         // 4: mycel.registry.v1beta1.AccessControl
	(*v1beta1.Coin)(nil),          // 5: cosmos.base.v1beta1.Coin
}
var file_mycel_registry_v1beta1_top_level_domain_proto_depIdxs = []int32{
	2, // 0: mycel.registry.v1beta1.TopLevelDomain.expiration_date:type_name -> google.protobuf.Timestamp
	3, // 1: mycel.registry.v1beta1.TopLevelDomain.subdomain_config:type_name -> mycel.registry.v1beta1.SubdomainConfig
	4, // 2: mycel.registry.v1beta1.TopLevelDomain.access_control:type_name -> mycel.registry.v1beta1.AccessControl
	5, // 3: mycel.registry.v1beta1.TopLevelDomain.total_withdrawal_amount:type_name -> cosmos.base.v1beta1.Coin
	5, // 4: mycel.registry.v1beta1.TopLevelDomainFee.total_fee:type_name -> cosmos.base.v1beta1.Coin
	5, // 5: mycel.registry.v1beta1.TopLevelDomainFee.fee_to_burn:type_name -> cosmos.base.v1beta1.Coin
	5, // 6: mycel.registry.v1beta1.TopLevelDomainFee.fee_to_treasury:type_name -> cosmos.base.v1beta1.Coin
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_mycel_registry_v1beta1_top_level_domain_proto_init() }
func file_mycel_registry_v1beta1_top_level_domain_proto_init() {
	if File_mycel_registry_v1beta1_top_level_domain_proto != nil {
		return
	}
	file_mycel_registry_v1beta1_access_control_proto_init()
	file_mycel_registry_v1beta1_subdomain_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mycel_registry_v1beta1_top_level_domain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopLevelDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mycel_registry_v1beta1_top_level_domain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopLevelDomainFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mycel_registry_v1beta1_top_level_domain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mycel_registry_v1beta1_top_level_domain_proto_goTypes,
		DependencyIndexes: file_mycel_registry_v1beta1_top_level_domain_proto_depIdxs,
		MessageInfos:      file_mycel_registry_v1beta1_top_level_domain_proto_msgTypes,
	}.Build()
	File_mycel_registry_v1beta1_top_level_domain_proto = out.File
	file_mycel_registry_v1beta1_top_level_domain_proto_rawDesc = nil
	file_mycel_registry_v1beta1_top_level_domain_proto_goTypes = nil
	file_mycel_registry_v1beta1_top_level_domain_proto_depIdxs = nil
}
