syntax = "proto3";

package mycel.registry.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "mycel/registry/v1/domain_ownership.proto";
import "mycel/registry/v1/params.proto";
import "mycel/registry/v1/top_level_domain.proto";
import "mycel/registry/v1/second_level_domain.proto";

option go_package = "github.com/mycel-domain/mycel/x/registry/types";

// Query defines the gRPC querier service.
service Query {

  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/mycel/registry/v1/params";
  }

  // Queries a list of TopLevelDomain items.
  rpc TopLevelDomain(QueryGetTopLevelDomainRequest)
      returns (QueryGetTopLevelDomainResponse) {
    option (google.api.http).get =
        "/mycel/registry/v1/top_level_domain/{name}";
  }
  rpc TopLevelDomainAll(QueryAllTopLevelDomainRequest)
      returns (QueryAllTopLevelDomainResponse) {
    option (google.api.http).get =
        "/mycel/registry/v1/top_level_domain";
  }

  // Queries a list of SecondLevelDomain items.
  rpc SecondLevelDomain(QueryGetSecondLevelDomainRequest)
      returns (QueryGetSecondLevelDomainResponse) {
    option (google.api.http).get =
        "/mycel/registry/v1/second_level_domain/{name}/{parent}";
  }
  rpc SecondLevelDomainAll(QueryAllSecondLevelDomainRequest)
      returns (QueryAllSecondLevelDomainResponse) {
    option (google.api.http).get =
        "/mycel/registry/v1/second_level_domain";
  }

  // Queries a list of DomainOwnership items.
  rpc DomainOwnership(QueryGetDomainOwnershipRequest)
      returns (QueryGetDomainOwnershipResponse) {
    option (google.api.http).get =
        "/mycel/registry/v1/domain_ownership/{owner}";
  }
  rpc DomainOwnershipAll(QueryAllDomainOwnershipRequest)
      returns (QueryAllDomainOwnershipResponse) {
    option (google.api.http).get =
        "/mycel/registry/v1/domain_ownership";
  }

  // Queries a list of DomainRegistrationFee items.
  rpc DomainRegistrationFee(QueryDomainRegistrationFeeRequest)
      returns (QueryDomainRegistrationFeeResponse) {
    option (google.api.http).get =
        "/mycel/registry/v1/domain_registration_fee/{name}/"
        "{parent}/{registerer}";
  }

  // Queries a list of Role items.
  rpc Role(QueryRoleRequest) returns (QueryRoleResponse) {
    option (google.api.http).get =
        "/mycel/registry/v1/role/{domain_name}/{address}";
  }

  // Queries a list of QueryWalletRecord items.
  rpc WalletRecord(QueryWalletRecordRequest)
      returns (QueryWalletRecordResponse) {
    option (google.api.http).get =
        "/mycel/resolver/v1/wallet_record/{domain_name}/"
        "{domain_parent}/{wallet_record_type}";
  }

  // Queries a list of DnsRecord items.
  rpc DnsRecord(QueryDnsRecordRequest) returns (QueryDnsRecordResponse) {
    option (google.api.http).get =
        "/mycel/resolver/v1/dns_record/{domain_name}/"
        "{domain_parent}/{dns_record_type}";
  }

  // Queries a list of AllRecord items.
  rpc AllRecords(QueryAllRecordsRequest) returns (QueryAllRecordsResponse) {
    option (google.api.http).get = "/mycel/resolver/v1/"
                                   "all_records/{domain_name}/{domain_parent}";
  }

  // Queries a list of TextRecord items.
  rpc TextRecord(QueryTextRecordRequest) returns (QueryTextRecordResponse) {
    option (google.api.http).get =
        "/mycel/resolver/v1/text_record/{domain_name}/"
        "{domain_parent}/{key}";
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {

  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryGetTopLevelDomainRequest { string name = 1; }

message QueryGetTopLevelDomainResponse {
  TopLevelDomain top_level_domain = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllTopLevelDomainRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTopLevelDomainResponse {
  repeated TopLevelDomain top_level_domain = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetSecondLevelDomainRequest {
  string name = 1;
  string parent = 2;
}

message SecondLevelDomainResponse {
  string name = 1;
  string parent = 2;
  google.protobuf.Timestamp expiration_date = 3
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
}

message QueryGetSecondLevelDomainResponse {
  SecondLevelDomainResponse second_level_domain = 1
      [ (gogoproto.nullable) = false ];
}

message QueryAllSecondLevelDomainRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSecondLevelDomainResponse {
  repeated SecondLevelDomainResponse second_level_domain = 1
      [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetDomainOwnershipRequest { string owner = 1; }

message QueryGetDomainOwnershipResponse {
  DomainOwnership domain_ownership = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllDomainOwnershipRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllDomainOwnershipResponse {
  repeated DomainOwnership domain_ownership = 1
      [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryDomainRegistrationFeeRequest {
  string name = 1;
  string parent = 2;
  uint64 registration_period_in_year = 3;
  string registerer = 4;
}

message QueryDomainRegistrationFeeResponse {
  bool is_registrable = 1;
  repeated cosmos.base.v1beta1.Coin fee = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  uint64 registration_period_in_year = 3;
  uint64 max_sub_domain_registrations = 4;
  string error_message = 5;
}

message QueryRoleRequest {
  string domain_name = 1;
  string address = 2;
}

message QueryRoleResponse { string role = 1; }

message QueryWalletRecordRequest {
  string domain_name = 1;
  string domain_parent = 2;
  string wallet_record_type = 3;
}

message QueryWalletRecordResponse { WalletRecord value = 1; }

message QueryDnsRecordRequest {
  string domain_name = 1;
  string domain_parent = 2;
  string dns_record_type = 3;
}

message QueryDnsRecordResponse { DnsRecord value = 1; }

message QueryAllRecordsRequest {
  string domain_name = 1;
  string domain_parent = 2;
}

message QueryAllRecordsResponse {
  map<string, Record> values = 1;
}

message QueryTextRecordRequest {
  string domain_name = 1;
  string domain_parent = 2;
  string key = 3;
}

message QueryTextRecordResponse { TextRecord value = 1; }
