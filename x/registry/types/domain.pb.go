// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mycel/registry/domain.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DnsRecordType int32

const (
	DnsRecordType_A     DnsRecordType = 0
	DnsRecordType_AAAA  DnsRecordType = 1
	DnsRecordType_CNAME DnsRecordType = 2
	DnsRecordType_NS    DnsRecordType = 3
	DnsRecordType_MX    DnsRecordType = 4
	DnsRecordType_PTR   DnsRecordType = 5
	DnsRecordType_SOA   DnsRecordType = 6
	DnsRecordType_SRV   DnsRecordType = 7
	DnsRecordType_TXT   DnsRecordType = 8
)

var DnsRecordType_name = map[int32]string{
	0: "A",
	1: "AAAA",
	2: "CNAME",
	3: "NS",
	4: "MX",
	5: "PTR",
	6: "SOA",
	7: "SRV",
	8: "TXT",
}

var DnsRecordType_value = map[string]int32{
	"A":     0,
	"AAAA":  1,
	"CNAME": 2,
	"NS":    3,
	"MX":    4,
	"PTR":   5,
	"SOA":   6,
	"SRV":   7,
	"TXT":   8,
}

func (x DnsRecordType) String() string {
	return proto.EnumName(DnsRecordType_name, int32(x))
}

func (DnsRecordType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cfd012ed897e4b87, []int{0}
}

type DnsRecordFormat int32

const (
	DnsRecordFormat_IPV4 DnsRecordFormat = 0
	DnsRecordFormat_IPV6 DnsRecordFormat = 1
	DnsRecordFormat_FQDN DnsRecordFormat = 2
)

var DnsRecordFormat_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
	2: "FQDN",
}

var DnsRecordFormat_value = map[string]int32{
	"IPV4": 0,
	"IPV6": 1,
	"FQDN": 2,
}

func (x DnsRecordFormat) String() string {
	return proto.EnumName(DnsRecordFormat_name, int32(x))
}

func (DnsRecordFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cfd012ed897e4b87, []int{1}
}

type WalletRecordType int32

const (
	WalletRecordType_ETHEREUM_MAINNET WalletRecordType = 0
	WalletRecordType_ETHEREUM_GOERLI  WalletRecordType = 1
	WalletRecordType_POLYGON_MAINNET  WalletRecordType = 2
	WalletRecordType_POLYGON_MUMBAI   WalletRecordType = 3
	WalletRecordType_GNOSIS_MAINNET   WalletRecordType = 4
	WalletRecordType_GNOSIS_CHIADO    WalletRecordType = 5
)

var WalletRecordType_name = map[int32]string{
	0: "ETHEREUM_MAINNET",
	1: "ETHEREUM_GOERLI",
	2: "POLYGON_MAINNET",
	3: "POLYGON_MUMBAI",
	4: "GNOSIS_MAINNET",
	5: "GNOSIS_CHIADO",
}

var WalletRecordType_value = map[string]int32{
	"ETHEREUM_MAINNET": 0,
	"ETHEREUM_GOERLI":  1,
	"POLYGON_MAINNET":  2,
	"POLYGON_MUMBAI":   3,
	"GNOSIS_MAINNET":   4,
	"GNOSIS_CHIADO":    5,
}

func (x WalletRecordType) String() string {
	return proto.EnumName(WalletRecordType_name, int32(x))
}

func (WalletRecordType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cfd012ed897e4b87, []int{2}
}

type WalletAddressFormat int32

const (
	WalletAddressFormat_ETHEREUM WalletAddressFormat = 0
)

var WalletAddressFormat_name = map[int32]string{
	0: "ETHEREUM",
}

var WalletAddressFormat_value = map[string]int32{
	"ETHEREUM": 0,
}

func (x WalletAddressFormat) String() string {
	return proto.EnumName(WalletAddressFormat_name, int32(x))
}

func (WalletAddressFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cfd012ed897e4b87, []int{3}
}

type DnsRecord struct {
	DnsRecordType   DnsRecordType   `protobuf:"varint,1,opt,name=DnsRecordType,proto3,enum=mycel.registry.DnsRecordType" json:"DnsRecordType,omitempty"`
	DnsRecordFormat DnsRecordFormat `protobuf:"varint,2,opt,name=DnsRecordFormat,proto3,enum=mycel.registry.DnsRecordFormat" json:"DnsRecordFormat,omitempty"`
	Value           string          `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *DnsRecord) Reset()         { *m = DnsRecord{} }
func (m *DnsRecord) String() string { return proto.CompactTextString(m) }
func (*DnsRecord) ProtoMessage()    {}
func (*DnsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfd012ed897e4b87, []int{0}
}
func (m *DnsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DnsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DnsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DnsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsRecord.Merge(m, src)
}
func (m *DnsRecord) XXX_Size() int {
	return m.Size()
}
func (m *DnsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DnsRecord proto.InternalMessageInfo

func (m *DnsRecord) GetDnsRecordType() DnsRecordType {
	if m != nil {
		return m.DnsRecordType
	}
	return DnsRecordType_A
}

func (m *DnsRecord) GetDnsRecordFormat() DnsRecordFormat {
	if m != nil {
		return m.DnsRecordFormat
	}
	return DnsRecordFormat_IPV4
}

func (m *DnsRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type WalletRecord struct {
	WalletRecordType    WalletRecordType    `protobuf:"varint,1,opt,name=WalletRecordType,proto3,enum=mycel.registry.WalletRecordType" json:"WalletRecordType,omitempty"`
	WalletAddressFormat WalletAddressFormat `protobuf:"varint,2,opt,name=WalletAddressFormat,proto3,enum=mycel.registry.WalletAddressFormat" json:"WalletAddressFormat,omitempty"`
	Value               string              `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *WalletRecord) Reset()         { *m = WalletRecord{} }
func (m *WalletRecord) String() string { return proto.CompactTextString(m) }
func (*WalletRecord) ProtoMessage()    {}
func (*WalletRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfd012ed897e4b87, []int{1}
}
func (m *WalletRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletRecord.Merge(m, src)
}
func (m *WalletRecord) XXX_Size() int {
	return m.Size()
}
func (m *WalletRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WalletRecord proto.InternalMessageInfo

func (m *WalletRecord) GetWalletRecordType() WalletRecordType {
	if m != nil {
		return m.WalletRecordType
	}
	return WalletRecordType_ETHEREUM_MAINNET
}

func (m *WalletRecord) GetWalletAddressFormat() WalletAddressFormat {
	if m != nil {
		return m.WalletAddressFormat
	}
	return WalletAddressFormat_ETHEREUM
}

func (m *WalletRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Domain struct {
	Name           string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent         string                   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Owner          string                   `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	ExpirationDate int64                    `protobuf:"varint,4,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	DnsRecords     map[string]*DnsRecord    `protobuf:"bytes,5,rep,name=DnsRecords,proto3" json:"DnsRecords,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WalletRecords  map[string]*WalletRecord `protobuf:"bytes,6,rep,name=WalletRecords,proto3" json:"WalletRecords,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metadata       map[string]string        `protobuf:"bytes,7,rep,name=Metadata,proto3" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Domain) Reset()         { *m = Domain{} }
func (m *Domain) String() string { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()    {}
func (*Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfd012ed897e4b87, []int{2}
}
func (m *Domain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Domain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Domain.Merge(m, src)
}
func (m *Domain) XXX_Size() int {
	return m.Size()
}
func (m *Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_Domain proto.InternalMessageInfo

func (m *Domain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Domain) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Domain) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Domain) GetExpirationDate() int64 {
	if m != nil {
		return m.ExpirationDate
	}
	return 0
}

func (m *Domain) GetDnsRecords() map[string]*DnsRecord {
	if m != nil {
		return m.DnsRecords
	}
	return nil
}

func (m *Domain) GetWalletRecords() map[string]*WalletRecord {
	if m != nil {
		return m.WalletRecords
	}
	return nil
}

func (m *Domain) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterEnum("mycel.registry.DnsRecordType", DnsRecordType_name, DnsRecordType_value)
	proto.RegisterEnum("mycel.registry.DnsRecordFormat", DnsRecordFormat_name, DnsRecordFormat_value)
	proto.RegisterEnum("mycel.registry.WalletRecordType", WalletRecordType_name, WalletRecordType_value)
	proto.RegisterEnum("mycel.registry.WalletAddressFormat", WalletAddressFormat_name, WalletAddressFormat_value)
	proto.RegisterType((*DnsRecord)(nil), "mycel.registry.DnsRecord")
	proto.RegisterType((*WalletRecord)(nil), "mycel.registry.WalletRecord")
	proto.RegisterType((*Domain)(nil), "mycel.registry.Domain")
	proto.RegisterMapType((map[string]*DnsRecord)(nil), "mycel.registry.Domain.DnsRecordsEntry")
	proto.RegisterMapType((map[string]string)(nil), "mycel.registry.Domain.MetadataEntry")
	proto.RegisterMapType((map[string]*WalletRecord)(nil), "mycel.registry.Domain.WalletRecordsEntry")
}

func init() { proto.RegisterFile("mycel/registry/domain.proto", fileDescriptor_cfd012ed897e4b87) }

var fileDescriptor_cfd012ed897e4b87 = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xb3, 0x71, 0x92, 0x26, 0xd3, 0x26, 0x5d, 0xa6, 0x15, 0x32, 0x05, 0x42, 0xd4, 0xa2,
	0x2a, 0x44, 0x22, 0x91, 0x02, 0x42, 0x08, 0x2e, 0xb8, 0x8d, 0xdb, 0x5a, 0x6a, 0xec, 0xb0, 0x49,
	0x4b, 0xe1, 0x40, 0xe5, 0x36, 0xab, 0x12, 0x91, 0xd8, 0x91, 0xed, 0x42, 0xfd, 0x10, 0x48, 0xbc,
	0x0a, 0xef, 0xc0, 0x01, 0x6e, 0x3d, 0x72, 0x44, 0xcd, 0x8b, 0x20, 0xdb, 0x89, 0x6b, 0xe7, 0x83,
	0x93, 0x67, 0xc6, 0xff, 0xff, 0x6f, 0x3f, 0x66, 0x77, 0xe1, 0xfe, 0xc0, 0x3d, 0xe7, 0xfd, 0x9a,
	0xc5, 0x2f, 0x7a, 0xb6, 0x63, 0xb9, 0xb5, 0xae, 0x39, 0xd0, 0x7b, 0x46, 0x75, 0x68, 0x99, 0x8e,
	0x89, 0x05, 0xff, 0x67, 0x75, 0xf2, 0x73, 0xf3, 0x07, 0x81, 0x5c, 0xc3, 0xb0, 0x19, 0x3f, 0x37,
	0xad, 0x2e, 0xee, 0x42, 0x3e, 0x4c, 0x3a, 0xee, 0x90, 0x8b, 0xa4, 0x44, 0xca, 0x85, 0xfa, 0xc3,
	0x6a, 0xdc, 0x55, 0x8d, 0x89, 0x58, 0xdc, 0x83, 0x0a, 0xac, 0x86, 0x85, 0x3d, 0xd3, 0x1a, 0xe8,
	0x8e, 0x98, 0xf4, 0x31, 0x8f, 0x16, 0x62, 0x02, 0x19, 0x9b, 0xf6, 0xe1, 0x3a, 0xa4, 0xbf, 0xe8,
	0xfd, 0x4b, 0x2e, 0x0a, 0x25, 0x52, 0xce, 0xb1, 0x20, 0xd9, 0xfc, 0x4d, 0x60, 0xe5, 0x9d, 0xde,
	0xef, 0x73, 0x67, 0x3c, 0xed, 0x43, 0xa0, 0xd1, 0x3c, 0x32, 0xf3, 0xd2, 0xf4, 0x90, 0xd3, 0x3a,
	0x36, 0xe3, 0xc4, 0x23, 0x58, 0x0b, 0x6a, 0x52, 0xb7, 0x6b, 0x71, 0xdb, 0x8e, 0xad, 0x61, 0x6b,
	0x3e, 0x30, 0x26, 0x65, 0xf3, 0xfc, 0x0b, 0xd6, 0xf2, 0x33, 0x05, 0x99, 0x86, 0xdf, 0x20, 0x44,
	0x48, 0x19, 0xfa, 0x20, 0x98, 0x79, 0x8e, 0xf9, 0x31, 0xde, 0x85, 0xcc, 0x50, 0xb7, 0xb8, 0x11,
	0x0c, 0x9f, 0x63, 0xe3, 0xcc, 0x83, 0x99, 0x5f, 0x0d, 0x6e, 0x4d, 0x60, 0x7e, 0x82, 0xdb, 0x50,
	0xe0, 0x57, 0xc3, 0x9e, 0xa5, 0x3b, 0x3d, 0xd3, 0x68, 0xe8, 0x0e, 0x17, 0x53, 0x25, 0x52, 0x16,
	0xd8, 0x54, 0x15, 0xf7, 0x00, 0xc2, 0x9d, 0xb6, 0xc5, 0x74, 0x49, 0x28, 0x2f, 0xd7, 0xb7, 0x67,
	0x9a, 0x13, 0x1c, 0x9b, 0x5b, 0xa1, 0x6c, 0x38, 0x96, 0xcb, 0x22, 0x4e, 0xd4, 0x20, 0x1f, 0xdd,
	0x3d, 0x5b, 0xcc, 0xf8, 0xa8, 0x27, 0x0b, 0x50, 0x31, 0x6d, 0x40, 0x8b, 0xfb, 0xf1, 0x0d, 0x64,
	0x9b, 0xdc, 0xd1, 0xbb, 0xba, 0xa3, 0x8b, 0x4b, 0x3e, 0xeb, 0xf1, 0x02, 0xd6, 0x44, 0x16, 0x60,
	0x42, 0xd7, 0xc6, 0x49, 0xe4, 0xf0, 0x05, 0x63, 0x20, 0x05, 0xe1, 0x33, 0x77, 0xc7, 0xdb, 0xea,
	0x85, 0x58, 0x9b, 0xb4, 0xc2, 0xdb, 0xd4, 0xe5, 0xfa, 0xbd, 0x85, 0xe7, 0x72, 0xdc, 0xa5, 0x57,
	0xc9, 0x97, 0x64, 0xe3, 0x23, 0xe0, 0xec, 0x02, 0xe6, 0xc0, 0xeb, 0x71, 0xf8, 0x83, 0xff, 0x9d,
	0xc0, 0x28, 0xff, 0x35, 0xe4, 0x63, 0x8b, 0x9a, 0x83, 0x5e, 0x8f, 0xa2, 0x73, 0x11, 0x73, 0xe5,
	0x74, 0xea, 0xe2, 0x62, 0x1a, 0x88, 0x44, 0x13, 0x98, 0x85, 0x94, 0x24, 0x49, 0x12, 0x25, 0x98,
	0x83, 0xf4, 0xae, 0x2a, 0x35, 0x65, 0x9a, 0xc4, 0x0c, 0x24, 0xd5, 0x36, 0x15, 0xbc, 0x6f, 0xf3,
	0x84, 0xa6, 0x70, 0x09, 0x84, 0x56, 0x87, 0xd1, 0xb4, 0x17, 0xb4, 0x35, 0x89, 0x66, 0xfc, 0x80,
	0x1d, 0xd3, 0x25, 0x2f, 0xe8, 0x9c, 0x74, 0x68, 0xb6, 0x52, 0x9b, 0xb9, 0xd4, 0x1e, 0x5b, 0x69,
	0x1d, 0x3f, 0x0f, 0x46, 0x51, 0x5a, 0xc7, 0x2f, 0x28, 0xf1, 0xa2, 0xbd, 0xb7, 0x0d, 0x95, 0x26,
	0x2b, 0xdf, 0xc8, 0xec, 0xa5, 0xc4, 0x75, 0xa0, 0x72, 0xe7, 0x40, 0x66, 0xf2, 0x51, 0xf3, 0xb4,
	0x29, 0x29, 0xaa, 0x2a, 0x77, 0x68, 0x02, 0xd7, 0x60, 0x35, 0xac, 0xee, 0x6b, 0x32, 0x3b, 0x54,
	0x28, 0xf1, 0x8a, 0x2d, 0xed, 0xf0, 0xfd, 0xbe, 0xa6, 0x86, 0xca, 0x24, 0x22, 0x14, 0xc2, 0xe2,
	0x51, 0x73, 0x47, 0x52, 0xa8, 0xe0, 0xd5, 0xf6, 0x55, 0xad, 0xad, 0xb4, 0x43, 0x5d, 0x0a, 0xef,
	0x40, 0x7e, 0x5c, 0xdb, 0x3d, 0x50, 0xa4, 0x86, 0x46, 0xd3, 0x95, 0xad, 0xb9, 0xb7, 0x1a, 0x57,
	0x20, 0x3b, 0x19, 0x9b, 0x26, 0x76, 0x0e, 0x7e, 0xdd, 0x14, 0xc9, 0xf5, 0x4d, 0x91, 0xfc, 0xbd,
	0x29, 0x92, 0xef, 0xa3, 0x62, 0xe2, 0x7a, 0x54, 0x4c, 0xfc, 0x19, 0x15, 0x13, 0x1f, 0xaa, 0x17,
	0x3d, 0xe7, 0xd3, 0xe5, 0x59, 0xf5, 0xdc, 0x1c, 0xd4, 0xfc, 0x86, 0x3e, 0x0d, 0x9e, 0xd5, 0x20,
	0xa9, 0x5d, 0xdd, 0x3e, 0xb7, 0x8e, 0x3b, 0xe4, 0xf6, 0x59, 0xc6, 0x7f, 0x6e, 0x9f, 0xfd, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0x4a, 0x5a, 0x96, 0x2d, 0x8d, 0x05, 0x00, 0x00,
}

func (m *DnsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DnsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DnsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DnsRecordFormat != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.DnsRecordFormat))
		i--
		dAtA[i] = 0x10
	}
	if m.DnsRecordType != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.DnsRecordType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WalletRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WalletAddressFormat != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.WalletAddressFormat))
		i--
		dAtA[i] = 0x10
	}
	if m.WalletRecordType != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.WalletRecordType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Domain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDomain(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDomain(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDomain(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.WalletRecords) > 0 {
		for k := range m.WalletRecords {
			v := m.WalletRecords[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDomain(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDomain(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDomain(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DnsRecords) > 0 {
		for k := range m.DnsRecords {
			v := m.DnsRecords[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDomain(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDomain(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDomain(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ExpirationDate != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.ExpirationDate))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDomain(dAtA []byte, offset int, v uint64) int {
	offset -= sovDomain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DnsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsRecordType != 0 {
		n += 1 + sovDomain(uint64(m.DnsRecordType))
	}
	if m.DnsRecordFormat != 0 {
		n += 1 + sovDomain(uint64(m.DnsRecordFormat))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	return n
}

func (m *WalletRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WalletRecordType != 0 {
		n += 1 + sovDomain(uint64(m.WalletRecordType))
	}
	if m.WalletAddressFormat != 0 {
		n += 1 + sovDomain(uint64(m.WalletAddressFormat))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	return n
}

func (m *Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.ExpirationDate != 0 {
		n += 1 + sovDomain(uint64(m.ExpirationDate))
	}
	if len(m.DnsRecords) > 0 {
		for k, v := range m.DnsRecords {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDomain(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDomain(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDomain(uint64(mapEntrySize))
		}
	}
	if len(m.WalletRecords) > 0 {
		for k, v := range m.WalletRecords {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDomain(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDomain(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDomain(uint64(mapEntrySize))
		}
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDomain(uint64(len(k))) + 1 + len(v) + sovDomain(uint64(len(v)))
			n += mapEntrySize + 1 + sovDomain(uint64(mapEntrySize))
		}
	}
	return n
}

func sovDomain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDomain(x uint64) (n int) {
	return sovDomain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DnsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DnsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DnsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsRecordType", wireType)
			}
			m.DnsRecordType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DnsRecordType |= DnsRecordType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsRecordFormat", wireType)
			}
			m.DnsRecordFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DnsRecordFormat |= DnsRecordFormat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletRecordType", wireType)
			}
			m.WalletRecordType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletRecordType |= WalletRecordType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddressFormat", wireType)
			}
			m.WalletAddressFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletAddressFormat |= WalletAddressFormat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Domain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Domain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Domain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			m.ExpirationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnsRecords == nil {
				m.DnsRecords = make(map[string]*DnsRecord)
			}
			var mapkey string
			var mapvalue *DnsRecord
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDomain
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDomain
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DnsRecord{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDomain(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDomain
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DnsRecords[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WalletRecords == nil {
				m.WalletRecords = make(map[string]*WalletRecord)
			}
			var mapkey string
			var mapvalue *WalletRecord
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDomain
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDomain
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WalletRecord{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDomain(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDomain
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WalletRecords[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDomain
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDomain
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDomain(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDomain
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDomain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDomain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDomain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDomain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDomain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDomain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDomain = fmt.Errorf("proto: unexpected end of group")
)
