// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mycel/registry/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgUpdateWalletRecord struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Parent           string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	WalletRecordType string `protobuf:"bytes,4,opt,name=walletRecordType,proto3" json:"walletRecordType,omitempty"`
	Value            string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MsgUpdateWalletRecord) Reset()         { *m = MsgUpdateWalletRecord{} }
func (m *MsgUpdateWalletRecord) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateWalletRecord) ProtoMessage()    {}
func (*MsgUpdateWalletRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{0}
}
func (m *MsgUpdateWalletRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateWalletRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateWalletRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateWalletRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateWalletRecord.Merge(m, src)
}
func (m *MsgUpdateWalletRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateWalletRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateWalletRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateWalletRecord proto.InternalMessageInfo

func (m *MsgUpdateWalletRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateWalletRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateWalletRecord) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *MsgUpdateWalletRecord) GetWalletRecordType() string {
	if m != nil {
		return m.WalletRecordType
	}
	return ""
}

func (m *MsgUpdateWalletRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MsgUpdateWalletRecordResponse struct {
}

func (m *MsgUpdateWalletRecordResponse) Reset()         { *m = MsgUpdateWalletRecordResponse{} }
func (m *MsgUpdateWalletRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateWalletRecordResponse) ProtoMessage()    {}
func (*MsgUpdateWalletRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{1}
}
func (m *MsgUpdateWalletRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateWalletRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateWalletRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateWalletRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateWalletRecordResponse.Merge(m, src)
}
func (m *MsgUpdateWalletRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateWalletRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateWalletRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateWalletRecordResponse proto.InternalMessageInfo

type MsgUpdateDnsRecord struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Parent        string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	DnsRecordType string `protobuf:"bytes,4,opt,name=dnsRecordType,proto3" json:"dnsRecordType,omitempty"`
	Value         string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MsgUpdateDnsRecord) Reset()         { *m = MsgUpdateDnsRecord{} }
func (m *MsgUpdateDnsRecord) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDnsRecord) ProtoMessage()    {}
func (*MsgUpdateDnsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{2}
}
func (m *MsgUpdateDnsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDnsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDnsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDnsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDnsRecord.Merge(m, src)
}
func (m *MsgUpdateDnsRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDnsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDnsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDnsRecord proto.InternalMessageInfo

func (m *MsgUpdateDnsRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateDnsRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateDnsRecord) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *MsgUpdateDnsRecord) GetDnsRecordType() string {
	if m != nil {
		return m.DnsRecordType
	}
	return ""
}

func (m *MsgUpdateDnsRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MsgUpdateDnsRecordResponse struct {
}

func (m *MsgUpdateDnsRecordResponse) Reset()         { *m = MsgUpdateDnsRecordResponse{} }
func (m *MsgUpdateDnsRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDnsRecordResponse) ProtoMessage()    {}
func (*MsgUpdateDnsRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{3}
}
func (m *MsgUpdateDnsRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDnsRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDnsRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDnsRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDnsRecordResponse.Merge(m, src)
}
func (m *MsgUpdateDnsRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDnsRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDnsRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDnsRecordResponse proto.InternalMessageInfo

type MsgRegisterSecondLevelDomain struct {
	Creator                  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name                     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Parent                   string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	RegistrationPeriodInYear uint64 `protobuf:"varint,4,opt,name=registrationPeriodInYear,proto3" json:"registrationPeriodInYear,omitempty"`
}

func (m *MsgRegisterSecondLevelDomain) Reset()         { *m = MsgRegisterSecondLevelDomain{} }
func (m *MsgRegisterSecondLevelDomain) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterSecondLevelDomain) ProtoMessage()    {}
func (*MsgRegisterSecondLevelDomain) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{4}
}
func (m *MsgRegisterSecondLevelDomain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterSecondLevelDomain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterSecondLevelDomain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterSecondLevelDomain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterSecondLevelDomain.Merge(m, src)
}
func (m *MsgRegisterSecondLevelDomain) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterSecondLevelDomain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterSecondLevelDomain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterSecondLevelDomain proto.InternalMessageInfo

func (m *MsgRegisterSecondLevelDomain) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterSecondLevelDomain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgRegisterSecondLevelDomain) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *MsgRegisterSecondLevelDomain) GetRegistrationPeriodInYear() uint64 {
	if m != nil {
		return m.RegistrationPeriodInYear
	}
	return 0
}

type MsgRegisterSecondLevelDomainResponse struct {
}

func (m *MsgRegisterSecondLevelDomainResponse) Reset()         { *m = MsgRegisterSecondLevelDomainResponse{} }
func (m *MsgRegisterSecondLevelDomainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterSecondLevelDomainResponse) ProtoMessage()    {}
func (*MsgRegisterSecondLevelDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{5}
}
func (m *MsgRegisterSecondLevelDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterSecondLevelDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterSecondLevelDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterSecondLevelDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterSecondLevelDomainResponse.Merge(m, src)
}
func (m *MsgRegisterSecondLevelDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterSecondLevelDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterSecondLevelDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterSecondLevelDomainResponse proto.InternalMessageInfo

type MsgRegisterTopLevelDomain struct {
	Creator                  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name                     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RegistrationPeriodInYear uint64 `protobuf:"varint,3,opt,name=registrationPeriodInYear,proto3" json:"registrationPeriodInYear,omitempty"`
}

func (m *MsgRegisterTopLevelDomain) Reset()         { *m = MsgRegisterTopLevelDomain{} }
func (m *MsgRegisterTopLevelDomain) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterTopLevelDomain) ProtoMessage()    {}
func (*MsgRegisterTopLevelDomain) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{6}
}
func (m *MsgRegisterTopLevelDomain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterTopLevelDomain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterTopLevelDomain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterTopLevelDomain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterTopLevelDomain.Merge(m, src)
}
func (m *MsgRegisterTopLevelDomain) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterTopLevelDomain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterTopLevelDomain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterTopLevelDomain proto.InternalMessageInfo

func (m *MsgRegisterTopLevelDomain) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterTopLevelDomain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgRegisterTopLevelDomain) GetRegistrationPeriodInYear() uint64 {
	if m != nil {
		return m.RegistrationPeriodInYear
	}
	return 0
}

type MsgRegisterTopLevelDomainResponse struct {
	TopLevelDomain *TopLevelDomain    `protobuf:"bytes,1,opt,name=topLevelDomain,proto3" json:"topLevelDomain,omitempty"`
	Fee            *TopLevelDomainFee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *MsgRegisterTopLevelDomainResponse) Reset()         { *m = MsgRegisterTopLevelDomainResponse{} }
func (m *MsgRegisterTopLevelDomainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterTopLevelDomainResponse) ProtoMessage()    {}
func (*MsgRegisterTopLevelDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{7}
}
func (m *MsgRegisterTopLevelDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterTopLevelDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterTopLevelDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterTopLevelDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterTopLevelDomainResponse.Merge(m, src)
}
func (m *MsgRegisterTopLevelDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterTopLevelDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterTopLevelDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterTopLevelDomainResponse proto.InternalMessageInfo

func (m *MsgRegisterTopLevelDomainResponse) GetTopLevelDomain() *TopLevelDomain {
	if m != nil {
		return m.TopLevelDomain
	}
	return nil
}

func (m *MsgRegisterTopLevelDomainResponse) GetFee() *TopLevelDomainFee {
	if m != nil {
		return m.Fee
	}
	return nil
}

type MsgWithdrawRegistrationFee struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MsgWithdrawRegistrationFee) Reset()         { *m = MsgWithdrawRegistrationFee{} }
func (m *MsgWithdrawRegistrationFee) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawRegistrationFee) ProtoMessage()    {}
func (*MsgWithdrawRegistrationFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{8}
}
func (m *MsgWithdrawRegistrationFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawRegistrationFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawRegistrationFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawRegistrationFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawRegistrationFee.Merge(m, src)
}
func (m *MsgWithdrawRegistrationFee) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawRegistrationFee) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawRegistrationFee.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawRegistrationFee proto.InternalMessageInfo

func (m *MsgWithdrawRegistrationFee) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdrawRegistrationFee) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MsgWithdrawRegistrationFeeResponse struct {
	RegistrationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=registrationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"registrationFee"`
}

func (m *MsgWithdrawRegistrationFeeResponse) Reset()         { *m = MsgWithdrawRegistrationFeeResponse{} }
func (m *MsgWithdrawRegistrationFeeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawRegistrationFeeResponse) ProtoMessage()    {}
func (*MsgWithdrawRegistrationFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{9}
}
func (m *MsgWithdrawRegistrationFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawRegistrationFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawRegistrationFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawRegistrationFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawRegistrationFeeResponse.Merge(m, src)
}
func (m *MsgWithdrawRegistrationFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawRegistrationFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawRegistrationFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawRegistrationFeeResponse proto.InternalMessageInfo

func (m *MsgWithdrawRegistrationFeeResponse) GetRegistrationFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RegistrationFee
	}
	return nil
}

type MsgExtendTopLevelDomainExpirationDate struct {
	Creator               string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name                  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ExtensionPeriodInYear uint64 `protobuf:"varint,3,opt,name=extensionPeriodInYear,proto3" json:"extensionPeriodInYear,omitempty"`
}

func (m *MsgExtendTopLevelDomainExpirationDate) Reset()         { *m = MsgExtendTopLevelDomainExpirationDate{} }
func (m *MsgExtendTopLevelDomainExpirationDate) String() string { return proto.CompactTextString(m) }
func (*MsgExtendTopLevelDomainExpirationDate) ProtoMessage()    {}
func (*MsgExtendTopLevelDomainExpirationDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{10}
}
func (m *MsgExtendTopLevelDomainExpirationDate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExtendTopLevelDomainExpirationDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExtendTopLevelDomainExpirationDate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExtendTopLevelDomainExpirationDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExtendTopLevelDomainExpirationDate.Merge(m, src)
}
func (m *MsgExtendTopLevelDomainExpirationDate) XXX_Size() int {
	return m.Size()
}
func (m *MsgExtendTopLevelDomainExpirationDate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExtendTopLevelDomainExpirationDate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExtendTopLevelDomainExpirationDate proto.InternalMessageInfo

func (m *MsgExtendTopLevelDomainExpirationDate) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgExtendTopLevelDomainExpirationDate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgExtendTopLevelDomainExpirationDate) GetExtensionPeriodInYear() uint64 {
	if m != nil {
		return m.ExtensionPeriodInYear
	}
	return 0
}

type MsgExtendTopLevelDomainExpirationDateResponse struct {
	TopLevelDomain *TopLevelDomain    `protobuf:"bytes,1,opt,name=topLevelDomain,proto3" json:"topLevelDomain,omitempty"`
	Fee            *TopLevelDomainFee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *MsgExtendTopLevelDomainExpirationDateResponse) Reset() {
	*m = MsgExtendTopLevelDomainExpirationDateResponse{}
}
func (m *MsgExtendTopLevelDomainExpirationDateResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgExtendTopLevelDomainExpirationDateResponse) ProtoMessage() {}
func (*MsgExtendTopLevelDomainExpirationDateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{11}
}
func (m *MsgExtendTopLevelDomainExpirationDateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExtendTopLevelDomainExpirationDateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExtendTopLevelDomainExpirationDateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExtendTopLevelDomainExpirationDateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExtendTopLevelDomainExpirationDateResponse.Merge(m, src)
}
func (m *MsgExtendTopLevelDomainExpirationDateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExtendTopLevelDomainExpirationDateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExtendTopLevelDomainExpirationDateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExtendTopLevelDomainExpirationDateResponse proto.InternalMessageInfo

func (m *MsgExtendTopLevelDomainExpirationDateResponse) GetTopLevelDomain() *TopLevelDomain {
	if m != nil {
		return m.TopLevelDomain
	}
	return nil
}

func (m *MsgExtendTopLevelDomainExpirationDateResponse) GetFee() *TopLevelDomainFee {
	if m != nil {
		return m.Fee
	}
	return nil
}

type MsgUpdateTextRecord struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Parent  string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	Key     string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Value   string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MsgUpdateTextRecord) Reset()         { *m = MsgUpdateTextRecord{} }
func (m *MsgUpdateTextRecord) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTextRecord) ProtoMessage()    {}
func (*MsgUpdateTextRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{12}
}
func (m *MsgUpdateTextRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTextRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTextRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTextRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTextRecord.Merge(m, src)
}
func (m *MsgUpdateTextRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTextRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTextRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTextRecord proto.InternalMessageInfo

func (m *MsgUpdateTextRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateTextRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateTextRecord) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *MsgUpdateTextRecord) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MsgUpdateTextRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MsgUpdateTextRecordResponse struct {
}

func (m *MsgUpdateTextRecordResponse) Reset()         { *m = MsgUpdateTextRecordResponse{} }
func (m *MsgUpdateTextRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTextRecordResponse) ProtoMessage()    {}
func (*MsgUpdateTextRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{13}
}
func (m *MsgUpdateTextRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTextRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTextRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTextRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTextRecordResponse.Merge(m, src)
}
func (m *MsgUpdateTextRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTextRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTextRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTextRecordResponse proto.InternalMessageInfo

type MsgUpdateTopLevelDomainRegistrationPolicy struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RegistrationPolicy string `protobuf:"bytes,3,opt,name=registrationPolicy,proto3" json:"registrationPolicy,omitempty"`
}

func (m *MsgUpdateTopLevelDomainRegistrationPolicy) Reset() {
	*m = MsgUpdateTopLevelDomainRegistrationPolicy{}
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicy) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdateTopLevelDomainRegistrationPolicy) ProtoMessage() {}
func (*MsgUpdateTopLevelDomainRegistrationPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{14}
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTopLevelDomainRegistrationPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTopLevelDomainRegistrationPolicy.Merge(m, src)
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicy) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTopLevelDomainRegistrationPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTopLevelDomainRegistrationPolicy proto.InternalMessageInfo

func (m *MsgUpdateTopLevelDomainRegistrationPolicy) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateTopLevelDomainRegistrationPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateTopLevelDomainRegistrationPolicy) GetRegistrationPolicy() string {
	if m != nil {
		return m.RegistrationPolicy
	}
	return ""
}

type MsgUpdateTopLevelDomainRegistrationPolicyResponse struct {
}

func (m *MsgUpdateTopLevelDomainRegistrationPolicyResponse) Reset() {
	*m = MsgUpdateTopLevelDomainRegistrationPolicyResponse{}
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicyResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdateTopLevelDomainRegistrationPolicyResponse) ProtoMessage() {}
func (*MsgUpdateTopLevelDomainRegistrationPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{15}
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTopLevelDomainRegistrationPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTopLevelDomainRegistrationPolicyResponse.Merge(m, src)
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTopLevelDomainRegistrationPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTopLevelDomainRegistrationPolicyResponse proto.InternalMessageInfo

type MsgSubmitTopLevelDomainProposal struct {
	Creator                  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name                     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RegistrationPeriodInYear uint64 `protobuf:"varint,3,opt,name=registrationPeriodInYear,proto3" json:"registrationPeriodInYear,omitempty"`
}

func (m *MsgSubmitTopLevelDomainProposal) Reset()         { *m = MsgSubmitTopLevelDomainProposal{} }
func (m *MsgSubmitTopLevelDomainProposal) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitTopLevelDomainProposal) ProtoMessage()    {}
func (*MsgSubmitTopLevelDomainProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{16}
}
func (m *MsgSubmitTopLevelDomainProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitTopLevelDomainProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitTopLevelDomainProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitTopLevelDomainProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitTopLevelDomainProposal.Merge(m, src)
}
func (m *MsgSubmitTopLevelDomainProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitTopLevelDomainProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitTopLevelDomainProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitTopLevelDomainProposal proto.InternalMessageInfo

func (m *MsgSubmitTopLevelDomainProposal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitTopLevelDomainProposal) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgSubmitTopLevelDomainProposal) GetRegistrationPeriodInYear() uint64 {
	if m != nil {
		return m.RegistrationPeriodInYear
	}
	return 0
}

type MsgSubmitTopLevelDomainProposalResponse struct {
}

func (m *MsgSubmitTopLevelDomainProposalResponse) Reset() {
	*m = MsgSubmitTopLevelDomainProposalResponse{}
}
func (m *MsgSubmitTopLevelDomainProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitTopLevelDomainProposalResponse) ProtoMessage()    {}
func (*MsgSubmitTopLevelDomainProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a4e7619dfc6612f, []int{17}
}
func (m *MsgSubmitTopLevelDomainProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitTopLevelDomainProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitTopLevelDomainProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitTopLevelDomainProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitTopLevelDomainProposalResponse.Merge(m, src)
}
func (m *MsgSubmitTopLevelDomainProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitTopLevelDomainProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitTopLevelDomainProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitTopLevelDomainProposalResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateWalletRecord)(nil), "mycel.registry.MsgUpdateWalletRecord")
	proto.RegisterType((*MsgUpdateWalletRecordResponse)(nil), "mycel.registry.MsgUpdateWalletRecordResponse")
	proto.RegisterType((*MsgUpdateDnsRecord)(nil), "mycel.registry.MsgUpdateDnsRecord")
	proto.RegisterType((*MsgUpdateDnsRecordResponse)(nil), "mycel.registry.MsgUpdateDnsRecordResponse")
	proto.RegisterType((*MsgRegisterSecondLevelDomain)(nil), "mycel.registry.MsgRegisterSecondLevelDomain")
	proto.RegisterType((*MsgRegisterSecondLevelDomainResponse)(nil), "mycel.registry.MsgRegisterSecondLevelDomainResponse")
	proto.RegisterType((*MsgRegisterTopLevelDomain)(nil), "mycel.registry.MsgRegisterTopLevelDomain")
	proto.RegisterType((*MsgRegisterTopLevelDomainResponse)(nil), "mycel.registry.MsgRegisterTopLevelDomainResponse")
	proto.RegisterType((*MsgWithdrawRegistrationFee)(nil), "mycel.registry.MsgWithdrawRegistrationFee")
	proto.RegisterType((*MsgWithdrawRegistrationFeeResponse)(nil), "mycel.registry.MsgWithdrawRegistrationFeeResponse")
	proto.RegisterType((*MsgExtendTopLevelDomainExpirationDate)(nil), "mycel.registry.MsgExtendTopLevelDomainExpirationDate")
	proto.RegisterType((*MsgExtendTopLevelDomainExpirationDateResponse)(nil), "mycel.registry.MsgExtendTopLevelDomainExpirationDateResponse")
	proto.RegisterType((*MsgUpdateTextRecord)(nil), "mycel.registry.MsgUpdateTextRecord")
	proto.RegisterType((*MsgUpdateTextRecordResponse)(nil), "mycel.registry.MsgUpdateTextRecordResponse")
	proto.RegisterType((*MsgUpdateTopLevelDomainRegistrationPolicy)(nil), "mycel.registry.MsgUpdateTopLevelDomainRegistrationPolicy")
	proto.RegisterType((*MsgUpdateTopLevelDomainRegistrationPolicyResponse)(nil), "mycel.registry.MsgUpdateTopLevelDomainRegistrationPolicyResponse")
	proto.RegisterType((*MsgSubmitTopLevelDomainProposal)(nil), "mycel.registry.MsgSubmitTopLevelDomainProposal")
	proto.RegisterType((*MsgSubmitTopLevelDomainProposalResponse)(nil), "mycel.registry.MsgSubmitTopLevelDomainProposalResponse")
}

func init() { proto.RegisterFile("mycel/registry/tx.proto", fileDescriptor_7a4e7619dfc6612f) }

var fileDescriptor_7a4e7619dfc6612f = []byte{
	// 851 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcf, 0x4f, 0xc4, 0x44,
	0x14, 0xde, 0x71, 0xf9, 0xa1, 0x8f, 0x08, 0xa4, 0xf2, 0xa3, 0x54, 0xe8, 0x42, 0x05, 0x04, 0x74,
	0x5b, 0x77, 0xc1, 0x18, 0x4d, 0x3c, 0x88, 0x40, 0xd4, 0xb8, 0x09, 0x29, 0x18, 0xa2, 0x17, 0xd2,
	0x6d, 0xc7, 0x52, 0xe9, 0x76, 0x9a, 0xce, 0xec, 0xb2, 0x7b, 0xf2, 0x60, 0x4c, 0x34, 0x5c, 0x3c,
	0x79, 0xd0, 0x83, 0x9c, 0x3c, 0x18, 0xff, 0x10, 0x8e, 0x1c, 0x3d, 0xa9, 0x81, 0x3f, 0x44, 0xb3,
	0xed, 0xee, 0xb0, 0x3f, 0xda, 0xdd, 0x2e, 0x21, 0xc6, 0xd3, 0xce, 0xcc, 0xfb, 0xde, 0x37, 0xdf,
	0x6b, 0x67, 0xbe, 0xb7, 0x85, 0xc5, 0x4a, 0xc3, 0xc4, 0xae, 0x16, 0x60, 0xdb, 0xa1, 0x2c, 0x68,
	0x68, 0xac, 0xae, 0xfa, 0x01, 0x61, 0x44, 0x98, 0x0e, 0x03, 0x6a, 0x3b, 0x20, 0xc9, 0x26, 0xa1,
	0x15, 0x42, 0xb5, 0xb2, 0x41, 0xb1, 0x56, 0x2b, 0x94, 0x31, 0x33, 0x0a, 0x9a, 0x49, 0x1c, 0x2f,
	0xc2, 0x4b, 0x73, 0x36, 0xb1, 0x49, 0x38, 0xd4, 0x9a, 0xa3, 0xd6, 0xea, 0x46, 0x2f, 0x3d, 0xf1,
	0xcf, 0x5d, 0x5c, 0xc3, 0xee, 0xb9, 0x45, 0x2a, 0x46, 0x3b, 0x59, 0xf9, 0x05, 0xc1, 0x7c, 0x89,
	0xda, 0x9f, 0xf9, 0x96, 0xc1, 0xf0, 0x99, 0xe1, 0xba, 0x98, 0xe9, 0xd8, 0x24, 0x81, 0x25, 0x88,
	0x30, 0x69, 0x06, 0xd8, 0x60, 0x24, 0x10, 0xd1, 0x2a, 0xda, 0x7a, 0x49, 0x6f, 0x4f, 0x05, 0x01,
	0xc6, 0x3c, 0xa3, 0x82, 0xc5, 0x17, 0xc2, 0xe5, 0x70, 0x2c, 0x2c, 0xc0, 0x84, 0x6f, 0x04, 0xd8,
	0x63, 0x62, 0x36, 0x5c, 0x6d, 0xcd, 0x84, 0x1d, 0x98, 0xbd, 0xea, 0x60, 0x3d, 0x6d, 0xf8, 0x58,
	0x1c, 0x0b, 0x11, 0x7d, 0xeb, 0xc2, 0x1c, 0x8c, 0xd7, 0x0c, 0xb7, 0x8a, 0xc5, 0xf1, 0x10, 0x10,
	0x4d, 0x94, 0x1c, 0xac, 0xc4, 0x0a, 0xd4, 0x31, 0xf5, 0x89, 0x47, 0xb1, 0xf2, 0x23, 0x02, 0x81,
	0x23, 0x0e, 0x3c, 0xfa, 0xac, 0xfa, 0xd7, 0xe1, 0x65, 0xab, 0x4d, 0xd9, 0x21, 0xbe, 0x7b, 0x31,
	0x41, 0xf9, 0x32, 0x48, 0xfd, 0xba, 0xb8, 0xec, 0x1b, 0x04, 0xcb, 0x25, 0x6a, 0xeb, 0xe1, 0x0b,
	0xc2, 0xc1, 0x09, 0x36, 0x89, 0x67, 0x7d, 0xda, 0x7c, 0x43, 0x07, 0xe1, 0x0b, 0x7a, 0xa6, 0x02,
	0xde, 0x03, 0xb1, 0x75, 0x06, 0x0c, 0xe6, 0x10, 0xef, 0x18, 0x07, 0x0e, 0xb1, 0x3e, 0xf6, 0x3e,
	0xc7, 0x46, 0x10, 0xd6, 0x32, 0xa6, 0x27, 0xc6, 0x95, 0x4d, 0x58, 0x1f, 0xa4, 0x90, 0x97, 0xf2,
	0x2d, 0x82, 0xa5, 0x0e, 0xe0, 0x29, 0xf1, 0x9f, 0x5e, 0xc7, 0x20, 0xbd, 0xd9, 0x21, 0x7a, 0x6f,
	0x10, 0xac, 0x25, 0xea, 0x68, 0xab, 0x15, 0x8e, 0x60, 0x9a, 0x75, 0x45, 0x42, 0x59, 0x53, 0x45,
	0x59, 0xed, 0xbe, 0x78, 0x6a, 0x4f, 0x7e, 0x4f, 0x96, 0xb0, 0x0b, 0xd9, 0x2f, 0x71, 0x24, 0x7e,
	0xaa, 0xb8, 0x36, 0x38, 0xf9, 0x08, 0x63, 0xbd, 0x89, 0x56, 0x3e, 0x09, 0xcf, 0xc4, 0x99, 0xc3,
	0x2e, 0xac, 0xc0, 0xb8, 0xd2, 0x3b, 0x2a, 0x39, 0xc2, 0x78, 0xb4, 0x47, 0xa5, 0xfc, 0x8c, 0x40,
	0x49, 0x26, 0xe3, 0xf5, 0x56, 0x61, 0x26, 0xe8, 0x0e, 0x89, 0x93, 0xab, 0xd9, 0xad, 0xa9, 0xe2,
	0x92, 0x1a, 0x39, 0x8b, 0xda, 0x74, 0x16, 0xb5, 0xe5, 0x2c, 0xea, 0x87, 0xc4, 0xf1, 0xf6, 0xdf,
	0xba, 0xfd, 0x33, 0x97, 0xf9, 0xed, 0xaf, 0xdc, 0x96, 0xed, 0xb0, 0x8b, 0x6a, 0x59, 0x35, 0x49,
	0x45, 0x6b, 0xd9, 0x50, 0xf4, 0x93, 0xa7, 0xd6, 0xa5, 0xc6, 0x1a, 0x3e, 0xa6, 0x61, 0x02, 0xd5,
	0x7b, 0xf7, 0x50, 0xae, 0x11, 0x6c, 0x94, 0xa8, 0x7d, 0x58, 0x67, 0xd8, 0xb3, 0xba, 0x9f, 0xc6,
	0x61, 0xdd, 0x77, 0x22, 0xe0, 0x81, 0xc1, 0x46, 0xac, 0x5a, 0xd8, 0x83, 0x79, 0xdc, 0xe4, 0xa4,
	0xf1, 0xa7, 0x23, 0x3e, 0xa8, 0xfc, 0x8e, 0x20, 0x9f, 0x4a, 0xcd, 0xff, 0xe3, 0x98, 0x7c, 0x83,
	0xe0, 0x15, 0xee, 0x1d, 0xa7, 0xb8, 0xfe, 0xbc, 0xa6, 0x3c, 0x0b, 0xd9, 0x4b, 0xdc, 0x68, 0x59,
	0x59, 0x73, 0x98, 0x60, 0x60, 0x2b, 0xf0, 0x6a, 0x8c, 0x08, 0x7e, 0xed, 0xbf, 0x47, 0xb0, 0xfd,
	0x18, 0xef, 0xb9, 0x6c, 0x1d, 0x57, 0x94, 0xb8, 0x8e, 0xd9, 0x18, 0x51, 0xba, 0x0a, 0x42, 0xd0,
	0xc7, 0xd1, 0x2a, 0x23, 0x26, 0xa2, 0xec, 0x42, 0x21, 0xb5, 0x14, 0x5e, 0xc0, 0x35, 0x82, 0x5c,
	0x89, 0xda, 0x27, 0xd5, 0x72, 0xc5, 0x61, 0xdd, 0x59, 0xc7, 0x01, 0xf1, 0x09, 0x35, 0xdc, 0xff,
	0xd0, 0xbd, 0xb6, 0xe1, 0xf5, 0x21, 0x62, 0xda, 0xc2, 0x8b, 0xff, 0xbc, 0x08, 0xd9, 0x12, 0xb5,
	0x85, 0xaf, 0x40, 0x88, 0xe9, 0xdc, 0x1b, 0xbd, 0x87, 0x2c, 0xb6, 0x7f, 0x4a, 0xf9, 0x54, 0x30,
	0x7e, 0x1f, 0x0c, 0x98, 0xe9, 0x6d, 0xb1, 0x4a, 0x22, 0x03, 0xc7, 0x48, 0x3b, 0xc3, 0x31, 0x7c,
	0x8b, 0xaf, 0x61, 0x29, 0xb9, 0x1d, 0xbe, 0x19, 0x43, 0x94, 0x88, 0x96, 0xf6, 0x46, 0x41, 0x73,
	0x01, 0x35, 0x58, 0x48, 0x68, 0x62, 0xdb, 0x03, 0xf8, 0xba, 0xa1, 0x52, 0x21, 0x35, 0x94, 0xef,
	0xdb, 0x80, 0xc5, 0xa4, 0x96, 0x10, 0xf7, 0xfc, 0x12, 0xb0, 0x52, 0x31, 0x3d, 0x96, 0x6f, 0xfd,
	0x13, 0x02, 0x25, 0x85, 0x47, 0xbf, 0x1d, 0x43, 0x3d, 0x3c, 0x4d, 0x7a, 0xff, 0x49, 0x69, 0x5c,
	0x9c, 0x05, 0xb3, 0x7d, 0x16, 0xf8, 0x5a, 0xe2, 0x81, 0x7a, 0x04, 0x49, 0x6f, 0xa4, 0x00, 0xf1,
	0x5d, 0x7e, 0x45, 0xb0, 0x99, 0xd2, 0xc4, 0xde, 0x4d, 0xe6, 0x1d, 0x92, 0x2a, 0x7d, 0xf0, 0xe4,
	0x54, 0x2e, 0xf4, 0x3b, 0x04, 0xcb, 0x03, 0xcd, 0x4a, 0x8b, 0xd9, 0x63, 0x50, 0x82, 0xf4, 0xce,
	0x88, 0x09, 0x6d, 0x29, 0xfb, 0x1f, 0xdd, 0xde, 0xcb, 0xe8, 0xee, 0x5e, 0x46, 0x7f, 0xdf, 0xcb,
	0xe8, 0x87, 0x07, 0x39, 0x73, 0xf7, 0x20, 0x67, 0xfe, 0x78, 0x90, 0x33, 0x5f, 0xa8, 0x1d, 0x7f,
	0x19, 0x42, 0xf2, 0x7c, 0xf4, 0xc1, 0x11, 0x4d, 0xb4, 0x7a, 0xc7, 0x27, 0x49, 0xf3, 0xef, 0x43,
	0x79, 0x22, 0xfc, 0x10, 0xd9, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xca, 0xf3, 0x21, 0x10,
	0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	UpdateWalletRecord(ctx context.Context, in *MsgUpdateWalletRecord, opts ...grpc.CallOption) (*MsgUpdateWalletRecordResponse, error)
	UpdateDnsRecord(ctx context.Context, in *MsgUpdateDnsRecord, opts ...grpc.CallOption) (*MsgUpdateDnsRecordResponse, error)
	RegisterSecondLevelDomain(ctx context.Context, in *MsgRegisterSecondLevelDomain, opts ...grpc.CallOption) (*MsgRegisterSecondLevelDomainResponse, error)
	RegisterTopLevelDomain(ctx context.Context, in *MsgRegisterTopLevelDomain, opts ...grpc.CallOption) (*MsgRegisterTopLevelDomainResponse, error)
	WithdrawRegistrationFee(ctx context.Context, in *MsgWithdrawRegistrationFee, opts ...grpc.CallOption) (*MsgWithdrawRegistrationFeeResponse, error)
	ExtendTopLevelDomainExpirationDate(ctx context.Context, in *MsgExtendTopLevelDomainExpirationDate, opts ...grpc.CallOption) (*MsgExtendTopLevelDomainExpirationDateResponse, error)
	UpdateTextRecord(ctx context.Context, in *MsgUpdateTextRecord, opts ...grpc.CallOption) (*MsgUpdateTextRecordResponse, error)
	UpdateTopLevelDomainRegistrationPolicy(ctx context.Context, in *MsgUpdateTopLevelDomainRegistrationPolicy, opts ...grpc.CallOption) (*MsgUpdateTopLevelDomainRegistrationPolicyResponse, error)
	SubmitTopLevelDomainProposal(ctx context.Context, in *MsgSubmitTopLevelDomainProposal, opts ...grpc.CallOption) (*MsgSubmitTopLevelDomainProposalResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateWalletRecord(ctx context.Context, in *MsgUpdateWalletRecord, opts ...grpc.CallOption) (*MsgUpdateWalletRecordResponse, error) {
	out := new(MsgUpdateWalletRecordResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.Msg/UpdateWalletRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDnsRecord(ctx context.Context, in *MsgUpdateDnsRecord, opts ...grpc.CallOption) (*MsgUpdateDnsRecordResponse, error) {
	out := new(MsgUpdateDnsRecordResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.Msg/UpdateDnsRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterSecondLevelDomain(ctx context.Context, in *MsgRegisterSecondLevelDomain, opts ...grpc.CallOption) (*MsgRegisterSecondLevelDomainResponse, error) {
	out := new(MsgRegisterSecondLevelDomainResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.Msg/RegisterSecondLevelDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterTopLevelDomain(ctx context.Context, in *MsgRegisterTopLevelDomain, opts ...grpc.CallOption) (*MsgRegisterTopLevelDomainResponse, error) {
	out := new(MsgRegisterTopLevelDomainResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.Msg/RegisterTopLevelDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawRegistrationFee(ctx context.Context, in *MsgWithdrawRegistrationFee, opts ...grpc.CallOption) (*MsgWithdrawRegistrationFeeResponse, error) {
	out := new(MsgWithdrawRegistrationFeeResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.Msg/WithdrawRegistrationFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExtendTopLevelDomainExpirationDate(ctx context.Context, in *MsgExtendTopLevelDomainExpirationDate, opts ...grpc.CallOption) (*MsgExtendTopLevelDomainExpirationDateResponse, error) {
	out := new(MsgExtendTopLevelDomainExpirationDateResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.Msg/ExtendTopLevelDomainExpirationDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTextRecord(ctx context.Context, in *MsgUpdateTextRecord, opts ...grpc.CallOption) (*MsgUpdateTextRecordResponse, error) {
	out := new(MsgUpdateTextRecordResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.Msg/UpdateTextRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTopLevelDomainRegistrationPolicy(ctx context.Context, in *MsgUpdateTopLevelDomainRegistrationPolicy, opts ...grpc.CallOption) (*MsgUpdateTopLevelDomainRegistrationPolicyResponse, error) {
	out := new(MsgUpdateTopLevelDomainRegistrationPolicyResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.Msg/UpdateTopLevelDomainRegistrationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitTopLevelDomainProposal(ctx context.Context, in *MsgSubmitTopLevelDomainProposal, opts ...grpc.CallOption) (*MsgSubmitTopLevelDomainProposalResponse, error) {
	out := new(MsgSubmitTopLevelDomainProposalResponse)
	err := c.cc.Invoke(ctx, "/mycel.registry.Msg/SubmitTopLevelDomainProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	UpdateWalletRecord(context.Context, *MsgUpdateWalletRecord) (*MsgUpdateWalletRecordResponse, error)
	UpdateDnsRecord(context.Context, *MsgUpdateDnsRecord) (*MsgUpdateDnsRecordResponse, error)
	RegisterSecondLevelDomain(context.Context, *MsgRegisterSecondLevelDomain) (*MsgRegisterSecondLevelDomainResponse, error)
	RegisterTopLevelDomain(context.Context, *MsgRegisterTopLevelDomain) (*MsgRegisterTopLevelDomainResponse, error)
	WithdrawRegistrationFee(context.Context, *MsgWithdrawRegistrationFee) (*MsgWithdrawRegistrationFeeResponse, error)
	ExtendTopLevelDomainExpirationDate(context.Context, *MsgExtendTopLevelDomainExpirationDate) (*MsgExtendTopLevelDomainExpirationDateResponse, error)
	UpdateTextRecord(context.Context, *MsgUpdateTextRecord) (*MsgUpdateTextRecordResponse, error)
	UpdateTopLevelDomainRegistrationPolicy(context.Context, *MsgUpdateTopLevelDomainRegistrationPolicy) (*MsgUpdateTopLevelDomainRegistrationPolicyResponse, error)
	SubmitTopLevelDomainProposal(context.Context, *MsgSubmitTopLevelDomainProposal) (*MsgSubmitTopLevelDomainProposalResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateWalletRecord(ctx context.Context, req *MsgUpdateWalletRecord) (*MsgUpdateWalletRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWalletRecord not implemented")
}
func (*UnimplementedMsgServer) UpdateDnsRecord(ctx context.Context, req *MsgUpdateDnsRecord) (*MsgUpdateDnsRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDnsRecord not implemented")
}
func (*UnimplementedMsgServer) RegisterSecondLevelDomain(ctx context.Context, req *MsgRegisterSecondLevelDomain) (*MsgRegisterSecondLevelDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSecondLevelDomain not implemented")
}
func (*UnimplementedMsgServer) RegisterTopLevelDomain(ctx context.Context, req *MsgRegisterTopLevelDomain) (*MsgRegisterTopLevelDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTopLevelDomain not implemented")
}
func (*UnimplementedMsgServer) WithdrawRegistrationFee(ctx context.Context, req *MsgWithdrawRegistrationFee) (*MsgWithdrawRegistrationFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawRegistrationFee not implemented")
}
func (*UnimplementedMsgServer) ExtendTopLevelDomainExpirationDate(ctx context.Context, req *MsgExtendTopLevelDomainExpirationDate) (*MsgExtendTopLevelDomainExpirationDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendTopLevelDomainExpirationDate not implemented")
}
func (*UnimplementedMsgServer) UpdateTextRecord(ctx context.Context, req *MsgUpdateTextRecord) (*MsgUpdateTextRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTextRecord not implemented")
}
func (*UnimplementedMsgServer) UpdateTopLevelDomainRegistrationPolicy(ctx context.Context, req *MsgUpdateTopLevelDomainRegistrationPolicy) (*MsgUpdateTopLevelDomainRegistrationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopLevelDomainRegistrationPolicy not implemented")
}
func (*UnimplementedMsgServer) SubmitTopLevelDomainProposal(ctx context.Context, req *MsgSubmitTopLevelDomainProposal) (*MsgSubmitTopLevelDomainProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTopLevelDomainProposal not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateWalletRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateWalletRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateWalletRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.Msg/UpdateWalletRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateWalletRecord(ctx, req.(*MsgUpdateWalletRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDnsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDnsRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDnsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.Msg/UpdateDnsRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDnsRecord(ctx, req.(*MsgUpdateDnsRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterSecondLevelDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterSecondLevelDomain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterSecondLevelDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.Msg/RegisterSecondLevelDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterSecondLevelDomain(ctx, req.(*MsgRegisterSecondLevelDomain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterTopLevelDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterTopLevelDomain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterTopLevelDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.Msg/RegisterTopLevelDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterTopLevelDomain(ctx, req.(*MsgRegisterTopLevelDomain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawRegistrationFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawRegistrationFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawRegistrationFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.Msg/WithdrawRegistrationFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawRegistrationFee(ctx, req.(*MsgWithdrawRegistrationFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExtendTopLevelDomainExpirationDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExtendTopLevelDomainExpirationDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExtendTopLevelDomainExpirationDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.Msg/ExtendTopLevelDomainExpirationDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExtendTopLevelDomainExpirationDate(ctx, req.(*MsgExtendTopLevelDomainExpirationDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTextRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTextRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTextRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.Msg/UpdateTextRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTextRecord(ctx, req.(*MsgUpdateTextRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTopLevelDomainRegistrationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTopLevelDomainRegistrationPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTopLevelDomainRegistrationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.Msg/UpdateTopLevelDomainRegistrationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTopLevelDomainRegistrationPolicy(ctx, req.(*MsgUpdateTopLevelDomainRegistrationPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitTopLevelDomainProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitTopLevelDomainProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitTopLevelDomainProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycel.registry.Msg/SubmitTopLevelDomainProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitTopLevelDomainProposal(ctx, req.(*MsgSubmitTopLevelDomainProposal))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mycel.registry.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateWalletRecord",
			Handler:    _Msg_UpdateWalletRecord_Handler,
		},
		{
			MethodName: "UpdateDnsRecord",
			Handler:    _Msg_UpdateDnsRecord_Handler,
		},
		{
			MethodName: "RegisterSecondLevelDomain",
			Handler:    _Msg_RegisterSecondLevelDomain_Handler,
		},
		{
			MethodName: "RegisterTopLevelDomain",
			Handler:    _Msg_RegisterTopLevelDomain_Handler,
		},
		{
			MethodName: "WithdrawRegistrationFee",
			Handler:    _Msg_WithdrawRegistrationFee_Handler,
		},
		{
			MethodName: "ExtendTopLevelDomainExpirationDate",
			Handler:    _Msg_ExtendTopLevelDomainExpirationDate_Handler,
		},
		{
			MethodName: "UpdateTextRecord",
			Handler:    _Msg_UpdateTextRecord_Handler,
		},
		{
			MethodName: "UpdateTopLevelDomainRegistrationPolicy",
			Handler:    _Msg_UpdateTopLevelDomainRegistrationPolicy_Handler,
		},
		{
			MethodName: "SubmitTopLevelDomainProposal",
			Handler:    _Msg_SubmitTopLevelDomainProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mycel/registry/tx.proto",
}

func (m *MsgUpdateWalletRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateWalletRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateWalletRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WalletRecordType) > 0 {
		i -= len(m.WalletRecordType)
		copy(dAtA[i:], m.WalletRecordType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WalletRecordType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateWalletRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateWalletRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateWalletRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDnsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDnsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDnsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DnsRecordType) > 0 {
		i -= len(m.DnsRecordType)
		copy(dAtA[i:], m.DnsRecordType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DnsRecordType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDnsRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDnsRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDnsRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterSecondLevelDomain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterSecondLevelDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterSecondLevelDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegistrationPeriodInYear != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RegistrationPeriodInYear))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterSecondLevelDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterSecondLevelDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterSecondLevelDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterTopLevelDomain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterTopLevelDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterTopLevelDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegistrationPeriodInYear != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RegistrationPeriodInYear))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterTopLevelDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterTopLevelDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterTopLevelDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TopLevelDomain != nil {
		{
			size, err := m.TopLevelDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawRegistrationFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawRegistrationFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawRegistrationFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawRegistrationFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawRegistrationFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawRegistrationFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegistrationFee) > 0 {
		for iNdEx := len(m.RegistrationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegistrationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgExtendTopLevelDomainExpirationDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExtendTopLevelDomainExpirationDate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExtendTopLevelDomainExpirationDate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtensionPeriodInYear != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExtensionPeriodInYear))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExtendTopLevelDomainExpirationDateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExtendTopLevelDomainExpirationDateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExtendTopLevelDomainExpirationDateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TopLevelDomain != nil {
		{
			size, err := m.TopLevelDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTextRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTextRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTextRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTextRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTextRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTextRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTopLevelDomainRegistrationPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTopLevelDomainRegistrationPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTopLevelDomainRegistrationPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegistrationPolicy) > 0 {
		i -= len(m.RegistrationPolicy)
		copy(dAtA[i:], m.RegistrationPolicy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RegistrationPolicy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTopLevelDomainRegistrationPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTopLevelDomainRegistrationPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTopLevelDomainRegistrationPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitTopLevelDomainProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitTopLevelDomainProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitTopLevelDomainProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegistrationPeriodInYear != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RegistrationPeriodInYear))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitTopLevelDomainProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitTopLevelDomainProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitTopLevelDomainProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateWalletRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WalletRecordType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateWalletRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateDnsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DnsRecordType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateDnsRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterSecondLevelDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RegistrationPeriodInYear != 0 {
		n += 1 + sovTx(uint64(m.RegistrationPeriodInYear))
	}
	return n
}

func (m *MsgRegisterSecondLevelDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterTopLevelDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RegistrationPeriodInYear != 0 {
		n += 1 + sovTx(uint64(m.RegistrationPeriodInYear))
	}
	return n
}

func (m *MsgRegisterTopLevelDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopLevelDomain != nil {
		l = m.TopLevelDomain.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawRegistrationFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawRegistrationFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegistrationFee) > 0 {
		for _, e := range m.RegistrationFee {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgExtendTopLevelDomainExpirationDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExtensionPeriodInYear != 0 {
		n += 1 + sovTx(uint64(m.ExtensionPeriodInYear))
	}
	return n
}

func (m *MsgExtendTopLevelDomainExpirationDateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopLevelDomain != nil {
		l = m.TopLevelDomain.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateTextRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateTextRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateTopLevelDomainRegistrationPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RegistrationPolicy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateTopLevelDomainRegistrationPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitTopLevelDomainProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RegistrationPeriodInYear != 0 {
		n += 1 + sovTx(uint64(m.RegistrationPeriodInYear))
	}
	return n
}

func (m *MsgSubmitTopLevelDomainProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateWalletRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateWalletRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateWalletRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletRecordType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletRecordType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateWalletRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateWalletRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateWalletRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDnsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDnsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDnsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsRecordType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsRecordType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDnsRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDnsRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDnsRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterSecondLevelDomain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterSecondLevelDomain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterSecondLevelDomain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationPeriodInYear", wireType)
			}
			m.RegistrationPeriodInYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegistrationPeriodInYear |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterSecondLevelDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterSecondLevelDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterSecondLevelDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterTopLevelDomain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterTopLevelDomain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterTopLevelDomain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationPeriodInYear", wireType)
			}
			m.RegistrationPeriodInYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegistrationPeriodInYear |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterTopLevelDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterTopLevelDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterTopLevelDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopLevelDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopLevelDomain == nil {
				m.TopLevelDomain = &TopLevelDomain{}
			}
			if err := m.TopLevelDomain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &TopLevelDomainFee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawRegistrationFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawRegistrationFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawRegistrationFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawRegistrationFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawRegistrationFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawRegistrationFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistrationFee = append(m.RegistrationFee, types.Coin{})
			if err := m.RegistrationFee[len(m.RegistrationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExtendTopLevelDomainExpirationDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExtendTopLevelDomainExpirationDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExtendTopLevelDomainExpirationDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionPeriodInYear", wireType)
			}
			m.ExtensionPeriodInYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtensionPeriodInYear |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExtendTopLevelDomainExpirationDateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExtendTopLevelDomainExpirationDateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExtendTopLevelDomainExpirationDateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopLevelDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopLevelDomain == nil {
				m.TopLevelDomain = &TopLevelDomain{}
			}
			if err := m.TopLevelDomain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &TopLevelDomainFee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTextRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTextRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTextRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTextRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTextRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTextRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTopLevelDomainRegistrationPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTopLevelDomainRegistrationPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistrationPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTopLevelDomainRegistrationPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTopLevelDomainRegistrationPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTopLevelDomainRegistrationPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitTopLevelDomainProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitTopLevelDomainProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitTopLevelDomainProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationPeriodInYear", wireType)
			}
			m.RegistrationPeriodInYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegistrationPeriodInYear |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitTopLevelDomainProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitTopLevelDomainProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitTopLevelDomainProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
