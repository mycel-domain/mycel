// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mycel/registry/req_registration_fees.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ReqRegistrationFeeByName struct {
	Name          string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsRegistrable bool        `protobuf:"varint,2,opt,name=isRegistrable,proto3" json:"isRegistrable,omitempty"`
	Fee           *types.Coin `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *ReqRegistrationFeeByName) Reset()         { *m = ReqRegistrationFeeByName{} }
func (m *ReqRegistrationFeeByName) String() string { return proto.CompactTextString(m) }
func (*ReqRegistrationFeeByName) ProtoMessage()    {}
func (*ReqRegistrationFeeByName) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c4d95cbeccd9457, []int{0}
}
func (m *ReqRegistrationFeeByName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqRegistrationFeeByName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqRegistrationFeeByName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqRegistrationFeeByName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqRegistrationFeeByName.Merge(m, src)
}
func (m *ReqRegistrationFeeByName) XXX_Size() int {
	return m.Size()
}
func (m *ReqRegistrationFeeByName) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqRegistrationFeeByName.DiscardUnknown(m)
}

var xxx_messageInfo_ReqRegistrationFeeByName proto.InternalMessageInfo

func (m *ReqRegistrationFeeByName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReqRegistrationFeeByName) GetIsRegistrable() bool {
	if m != nil {
		return m.IsRegistrable
	}
	return false
}

func (m *ReqRegistrationFeeByName) GetFee() *types.Coin {
	if m != nil {
		return m.Fee
	}
	return nil
}

type ReqRegistrationFeeByLength struct {
	Length        uint32      `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	IsRegistrable bool        `protobuf:"varint,2,opt,name=isRegistrable,proto3" json:"isRegistrable,omitempty"`
	Fee           *types.Coin `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *ReqRegistrationFeeByLength) Reset()         { *m = ReqRegistrationFeeByLength{} }
func (m *ReqRegistrationFeeByLength) String() string { return proto.CompactTextString(m) }
func (*ReqRegistrationFeeByLength) ProtoMessage()    {}
func (*ReqRegistrationFeeByLength) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c4d95cbeccd9457, []int{1}
}
func (m *ReqRegistrationFeeByLength) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqRegistrationFeeByLength) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqRegistrationFeeByLength.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqRegistrationFeeByLength) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqRegistrationFeeByLength.Merge(m, src)
}
func (m *ReqRegistrationFeeByLength) XXX_Size() int {
	return m.Size()
}
func (m *ReqRegistrationFeeByLength) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqRegistrationFeeByLength.DiscardUnknown(m)
}

var xxx_messageInfo_ReqRegistrationFeeByLength proto.InternalMessageInfo

func (m *ReqRegistrationFeeByLength) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ReqRegistrationFeeByLength) GetIsRegistrable() bool {
	if m != nil {
		return m.IsRegistrable
	}
	return false
}

func (m *ReqRegistrationFeeByLength) GetFee() *types.Coin {
	if m != nil {
		return m.Fee
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqRegistrationFeeByName)(nil), "mycel.registry.ReqRegistrationFeeByName")
	proto.RegisterType((*ReqRegistrationFeeByLength)(nil), "mycel.registry.ReqRegistrationFeeByLength")
}

func init() {
	proto.RegisterFile("mycel/registry/req_registration_fees.proto", fileDescriptor_2c4d95cbeccd9457)
}

var fileDescriptor_2c4d95cbeccd9457 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x91, 0x3f, 0x4b, 0x03, 0x31,
	0x18, 0xc6, 0x1b, 0xff, 0x14, 0x8d, 0xd4, 0x21, 0x83, 0x9c, 0x1d, 0xc2, 0x51, 0x1c, 0x0e, 0xc5,
	0x84, 0xea, 0x37, 0xa8, 0x20, 0x0e, 0xe2, 0x90, 0xd1, 0xa5, 0xe4, 0xce, 0xb7, 0xd7, 0xc0, 0x25,
	0x69, 0x2f, 0x51, 0xbc, 0xd1, 0xc9, 0xd5, 0x8f, 0xe5, 0xd8, 0xd1, 0x51, 0xee, 0xbe, 0x88, 0x34,
	0x77, 0x45, 0x05, 0x57, 0xb7, 0xe7, 0x09, 0x3f, 0xc2, 0x8f, 0xe7, 0xc5, 0xa7, 0xba, 0xca, 0xa0,
	0xe0, 0x25, 0xe4, 0xca, 0xf9, 0xb2, 0xe2, 0x25, 0x2c, 0xa7, 0x5d, 0x91, 0x5e, 0x59, 0x33, 0x9d,
	0x01, 0x38, 0xb6, 0x28, 0xad, 0xb7, 0xe4, 0x30, 0xb0, 0x6c, 0xc3, 0x0e, 0x69, 0x66, 0x9d, 0xb6,
	0x8e, 0xa7, 0xd2, 0x01, 0x7f, 0x1a, 0xa7, 0xe0, 0xe5, 0x98, 0x67, 0x56, 0x99, 0x96, 0x1f, 0xbd,
	0x20, 0x1c, 0x09, 0x58, 0x8a, 0x1f, 0xdf, 0x5d, 0x03, 0x4c, 0xaa, 0x3b, 0xa9, 0x81, 0x10, 0xbc,
	0x63, 0xa4, 0x86, 0x08, 0xc5, 0x28, 0xd9, 0x17, 0x21, 0x93, 0x13, 0x3c, 0x50, 0x6e, 0x83, 0xa7,
	0x05, 0x44, 0x5b, 0x31, 0x4a, 0xf6, 0xc4, 0xef, 0x47, 0x72, 0x86, 0xb7, 0x67, 0x00, 0xd1, 0x6e,
	0x8c, 0x92, 0x83, 0x8b, 0x63, 0xd6, 0x4a, 0xb0, 0xb5, 0x04, 0xeb, 0x24, 0xd8, 0x95, 0x55, 0x46,
	0xac, 0xa9, 0xd1, 0x2b, 0xc2, 0xc3, 0xbf, 0x1c, 0x6e, 0xc1, 0xe4, 0x7e, 0x4e, 0x8e, 0x70, 0xbf,
	0x08, 0x29, 0x78, 0x0c, 0x44, 0xd7, 0xfe, 0xc1, 0x64, 0x72, 0xf3, 0x5e, 0x53, 0xb4, 0xaa, 0x29,
	0xfa, 0xac, 0x29, 0x7a, 0x6b, 0x68, 0x6f, 0xd5, 0xd0, 0xde, 0x47, 0x43, 0x7b, 0xf7, 0x2c, 0x57,
	0x7e, 0xfe, 0x98, 0xb2, 0xcc, 0x6a, 0x1e, 0x26, 0x3e, 0x7f, 0xb0, 0x5a, 0x2a, 0xd3, 0x16, 0xfe,
	0xfc, 0x7d, 0x1d, 0x5f, 0x2d, 0xc0, 0xa5, 0xfd, 0x30, 0xef, 0xe5, 0x57, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xcc, 0x49, 0x6d, 0x36, 0xbc, 0x01, 0x00, 0x00,
}

func (m *ReqRegistrationFeeByName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRegistrationFeeByName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqRegistrationFeeByName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReqRegistrationFees(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IsRegistrable {
		i--
		if m.IsRegistrable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintReqRegistrationFees(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqRegistrationFeeByLength) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRegistrationFeeByLength) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqRegistrationFeeByLength) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReqRegistrationFees(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IsRegistrable {
		i--
		if m.IsRegistrable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Length != 0 {
		i = encodeVarintReqRegistrationFees(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReqRegistrationFees(dAtA []byte, offset int, v uint64) int {
	offset -= sovReqRegistrationFees(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReqRegistrationFeeByName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReqRegistrationFees(uint64(l))
	}
	if m.IsRegistrable {
		n += 2
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovReqRegistrationFees(uint64(l))
	}
	return n
}

func (m *ReqRegistrationFeeByLength) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovReqRegistrationFees(uint64(m.Length))
	}
	if m.IsRegistrable {
		n += 2
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovReqRegistrationFees(uint64(l))
	}
	return n
}

func sovReqRegistrationFees(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReqRegistrationFees(x uint64) (n int) {
	return sovReqRegistrationFees(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqRegistrationFeeByName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReqRegistrationFees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRegistrationFeeByName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRegistrationFeeByName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReqRegistrationFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReqRegistrationFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReqRegistrationFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistrable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReqRegistrationFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistrable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReqRegistrationFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReqRegistrationFees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReqRegistrationFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &types.Coin{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReqRegistrationFees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReqRegistrationFees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRegistrationFeeByLength) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReqRegistrationFees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRegistrationFeeByLength: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRegistrationFeeByLength: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReqRegistrationFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistrable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReqRegistrationFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistrable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReqRegistrationFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReqRegistrationFees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReqRegistrationFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &types.Coin{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReqRegistrationFees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReqRegistrationFees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReqRegistrationFees(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReqRegistrationFees
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReqRegistrationFees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReqRegistrationFees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReqRegistrationFees
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReqRegistrationFees
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReqRegistrationFees
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReqRegistrationFees        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReqRegistrationFees          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReqRegistrationFees = fmt.Errorf("proto: unexpected end of group")
)
